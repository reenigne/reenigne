experimentMandel:
  db "Mandel$"
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  mov di,[si]  ; x*x
  mov bp,[bx]  ; y*y
  lea ax,[di+bp] ; x*x+y*y
  cmp ax,ax
  jne .foo
.foo
  dec cx
  mov bx,[si+bx] ; (x+y)*(x+y)
  sub bx,ax  ; 2*x*y
  add bx,dx  ; 2*x*y+b -> new y
  mov si,es
  add si,di
  sub si,bp  ; x*x-y*y+a -> new x
.endCode:




experimentMod4:
  db "Mod4$"
  db 18
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

  add bp,0x0f0f
  mov bx,bp
  mov bl,0x0f
  mov al,[bx]
  add si,0x0f0f
  mov bx,si
  mov bl,0x0f
  add al,[bx]
  add di,0x0f0f
  mov bx,di
  mov bl,0x0f
  add al,[bx]
  add dx,0x0f0f
  mov bx,dx
  mov bl,0x0f
  add al,[bx]
  out 0xe0,al

.endCode

experimentMod3:
  db "Mod3$"
  db 18
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

  add bp,0x0f0f
  mov bx,bp
  mov bl,0x0f
  mov al,[bx]
  add si,0x0f0f
  mov bx,si
  mov bl,0x0f
  add al,[bx]
  add di,0x0f0f
  mov bx,di
  mov bl,0x0f
  add al,[bx]
  out 0xe0,al

.endCode


experimentJoytest:
  db "Joytest$"
  db 0
  dw .endInit - ($+2)
  mov ax,ds
  mov es,ax
  mov dx,0x201
.endInit:
  dw .endCode - ($+2)
  in al,dx
  stosb
.endCode:

experimentJoytest1:
  db "Joytest1$"
  db 18
  dw .endInit - ($+2)
  mov dx,0x0201
.joyloop:
  in al,dx
  test al,1
  loopnz .joyloop
.endInit:
  dw .endCode - ($+2)
.endCode:

experimentJoytest2:
  db "Joytest2$"
  db 18
  dw .endInit - ($+2)
  mov dx,0x0201
.joyloop:
  in al,dx
  test al,1
  loopz .joyloop
.endInit:
  dw .endCode - ($+2)
.endCode:


experimentJohn157:
  db "John157$"
  db 0
  dw .endInit - ($+2)
  mov ax,ss
  mov es,ax
.endInit:
  dw .endCode - ($+2)
    pop  ax ; Fetch two samples into AX or other convenient register
    add  [di+16],ax ; After some number of unrolls bump DI to keep short ofs
    pop  ax
    add  [di+18],ax
    add di,16
    pop  ax
    add  [di+20],ax
    pop  ax
    add  [di+22],ax
    lodsb
    out  0xe0,al
    cld
    cld
    cld
    cld
    cld
    cld
.endCode:

experimentJohn785:
  db "John785$"
  db 0
  dw .endInit - ($+2)
  mov ax,ss
  mov es,ax
.endInit:
  dw .endCode - ($+2)
    pop  ax ; Fetch two samples into AX or other convenient register
    mov  bh,al
    add  [di+16],bx
    mov  bl,ah
    add  [di+18],ax
    add di,16
    pop  ax
    mov  bh,al
    add  [di+20],bx
    mov  bl,ah
    add  [di+22],ax
    lodsb
    out  0xe0,al
    cld
    cld
    cld
    cld
    cld
    cld
.endCode:

experimentUnpackShift:
  db "UnpackShift$"
  db 19
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  mov cl,4    ;ax = ???????? -xxx-yyy
  cbw         ;ax = -------- -xxx-yyy
  shl ax,cl   ;ax = -----xxx -yyy0000
  sar al,cl   ;ax = -----xxx -----yyy
.endCode:

;experimentUnpackTable:
;  db "UnpackTable$"
;  db 19
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  xor bx,bx
;  mov bl,al
;  shl bx,1
;  mov ax,word[cs:bx+0x1234]
;.endCode:
;
;experimentUnpackTable2:
;  db "UnpackTable$"
;  db 19
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  xchg ax,bx
;  mov bl,0
;  add bx,bx
;  mov ax,word[cs:bx+0x1234]
;.endCode:
;
;experimentKefrens:
;  db "Kefrens$"
;  db 19
;  dw .endInit - ($+2)
;
;  mov dx,0x3d9
;
;.endInit:
;  dw .endCode - ($+2)
;
;  mov ax,0x7000
;  mov ds,ax            ; 2 0
;  mov sp,[bx]          ; 2 2
;
;  pop di               ; 1 2
;  mov al,[es:di]       ; 3 1 +WS
;  pop cx               ; 1 2
;  and ax,cx            ; 2 0
;  pop cx               ; 1 2
;  or ax,cx             ; 2 0
;  stosw                ; 1 2 +WS +WS
;  pop cx               ; 1 2
;  and ch,[es:di+1]     ; 4 1 +WS
;  mov al,0
;  out dx,al
;  pop ax               ; 1 2
;  or ax,cx             ; 2 0
;  stosw                ; 1 2 +WS +WS
;
;  cld
;  cld
;;  mov ds,bp            ; 2 0
;
;  pop ax               ; 1 2
;  out dx,al            ; 1 1
;.endCode:
;
;
;experimentKBload:
;  db "KBload$"
;  db 18
;  dw .endInit - ($+2)
;
;  mov dx,0xe0
;  mov ax,ds
;  mov es,ax
;
;.endInit:
;  dw .endCode - ($+2)
;
;  mov al,bl
;  out dx,al
;  mov al,bh
;  out dx,al
;  dec dx
;.tst1:
;  in al,0xe0
;  and al,ah
;  jnz .tst1
;  stosb
;  inc dx
;  loop .tst
;.tst:
;
;.endCode:
;
;
;experimentOctodeXL7:
;  db "OctodeXL7$"
;  db 18
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  mov di,cx
;
;.top:
;  dec bl
;  jz .noCarry1
;  mov bl,9
;  inc ax
;.noCarry1:
;  shl al,1
;  shl al,1
;  shl al,1
;  out 0xe0,al
;  xor ax,ax
;  dec di
;  jnz .top
;
;
;.endCode:
;
;
;experimentOctodeXL1a:
;  db "OctodeXL1a$"
;  db 18
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  dec bl
;  jnz .noCarry1
;  mov bl,9
;  db 5
;.noCarry1:
;.endCode:
;
;experimentOctodeXL1b:
;  db "OctodeXL1b$"
;  db 18
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  dec bl
;  jnz .noCarry1
;  mov bl,9
;  db 5
;.noCarry1:
;.endCode:
;
;experimentOctodeXL2:
;  db "OctodeXL2$"
;  db 18
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  dec bl
;  jz .noCarry1
;  mov bl,9
;  inc ax
;.noCarry1:
;.endCode:




experimentROLCL:
  db "ROLCL$"
  dw .endInit - ($+2)
  mov ax,0x7000
  mov ds,ax
  xor si,si
  xor bx,bx
  cld
.endInit:
  dw .endCode - ($+2)
  jmp $+2
  lodsw
  mov cl, 4
  rol ax, cl
  mov [bx], ax
.endCode:


experimentROLx4:
  db "ROLx4$"
  dw .endInit - ($+2)
  mov ax,0x7000
  mov ds,ax
  xor si,si
  xor bx,bx
  cld
.endInit:
  dw .endCode - ($+2)
  jmp $+2
  lodsw
  rol ax, 1
  rol ax, 1
  rol ax, 1
  rol ax, 1
  mov [bx], ax
.endCode:

experimentJMPp2:
  db "JMPp2$"
  dw .endInit - ($+2)
  mov ax,0x7000
  mov ds,ax
  xor si,si
  xor bx,bx
  cld
.endInit:
  dw .endCode - ($+2)
  jmp $+2
.endCode:



experimentTracePIT:
  db "TracePIT$"
  dw .endInit - ($+2)

  mov ax,0x7000
  mov es,ax
  xor di,di
  mov al,TIMER2 | BOTH | MODE2 | BINARY
  out 0x43,al
  mov dx,0x42
  mov al,0
  out dx,al
  out dx,al

.endInit:
  dw .endCode - ($+2)
  readPIT16 2
  stosw
.shortPath:
.endCode:



experimentLockstepOscillate:
  db "LockstepOscillate$"
  dw .endInit - ($+2)
  mov dx,0x3da
  mov ax,0x7000
  mov es,ax
  xor di,di
.endInit:
  dw .endCode - ($+2)
  in al,dx
  in al,dx
  in al,dx
  nop
  stosb
.shortPath:
.endCode:



experimentLockstep1:
  db "Lockstep1$"
  dw .endInit - ($+2)
  mov al,0
.endInit:
  dw .endCode - ($+2)
  jmp $+2
  test al,1
  jz .shortPath
;  times 2 nop
  jmp $+2
.shortPath:
.endCode:

experimentLockstep2:
  db "Lockstep2$"
  dw .endInit - ($+2)
  mov al,1
.endInit:
  dw .endCode - ($+2)
  jmp $+2
  test al,1
  jz .shortPath
;  times 2 nop
  jmp $+2
.shortPath:
.endCode:






experimentTestALBL:
  db "Test AL,BL$"
  dw .endInit - ($+2)
  mov bl,1
  mov ax,1
.endInit:
  dw .endCode - ($+2)
  test al,bl
.endCode:

experimentTestAL1:
  db "Test AL,1$"
  dw .endInit - ($+2)
  mov bl,1
  mov ax,1
.endInit:
  dw .endCode - ($+2)
  test al,1
.endCode:

experimentTestALBLEU:
  db "Test AL,BL EU bound$"
  dw .endInit - ($+2)
  mov bl,1
  mov ax,1
  mov dl,1
.endInit:
  dw .endCode - ($+2)
  mul dl
  test al,bl
.endCode:

experimentTestAL1EU:
  db "Test AL,1 EU bound$"
  dw .endInit - ($+2)
  mov bl,1
  mov ax,1
  mov dl,1
.endInit:
  dw .endCode - ($+2)
  mul dl
  test al,1
.endCode:

experimentEU:
  db "EU bound correction$"
  dw .endInit - ($+2)
  mov bl,1
  mov ax,1
  mov dl,1
.endInit:
  dw .endCode - ($+2)
  mul dl
.endCode:


experimentMul:
  db "Mul$"
  dw .endInit - ($+2)
  mov dx,0
  mov ax,0
.endInit:
  dw .endCode - ($+2)
  mul dx
.endCode:

experimentOrAlAl:
  db "OrAlAl$"
  dw .endInit - ($+2)
  mov dx,0
  mov ax,0
.endInit:
  dw .endCode - ($+2)
  mul dx
  or al,al
.endCode:

experimentXorAlAl:
  db "XorAlAl$"
  dw .endInit - ($+2)
  mov dx,0
  mov ax,0
.endInit:
  dw .endCode - ($+2)
  mul dx
  xor al,al
.endCode:

experimentMovAl0:
  db "MovAl0$"
  dw .endInit - ($+2)
  mov dx,0
  mov ax,0
.endInit:
  dw .endCode - ($+2)
  mul dx
  mov al,0
.endCode:

experimentCmpAl0:
  db "CmpAl0$"
  dw .endInit - ($+2)
  mov dx,0
  mov ax,0
.endInit:
  dw .endCode - ($+2)
  mul dx
  cmp al,0
.endCode:

experimentAmiga:
  db "Amiga$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  mov ax,1
  mov bx,2
  mov cx,3
  mov di,4
  mov bp,5
  mov sp,6
  mov si,7
  mov ax,0x8000
  mov ds,ax
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  lodsb
  out 0xe0,al
  mov al,1
.endCode:



experimentPlasmaOrig:
  db "PlasmaOrig$"
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)

  add cx,si
  add dx,bp
  mov al,ch
  mov bh,dh
  xlatb
  stosb
.endCode:


experimentADDMOVW:
  db "ADDMOVW$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  or di,0x101
  movsw
.endCode:

experimentADDMOVB:
  db "ADDMOVB$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  add di,2
  movsw
.endCode:

experimentDirectB:
  db "DirectB$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  mov word[di+1],1234
.endCode:

experimentDirectW:
  db "DirectW$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  mov word[di+1234],1234
.endCode:



experimentORByteByte:
  db "ORByteByte$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  lodsb             ; 1 1 2
  or [es:di],al     ; 3 2 5 +2*WS
  inc di            ; 1 0 1
  movsb             ; 1 2 3 +WS
.endCode:


experimentORWord:
  db "ORWord$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  lodsw             ; 1 2 3
  or [es:di],ax     ; 3 4 7 +4*WS
  inc di            ; 1 0 1
  inc di            ; 1 0 1
.endCode:


experimentTransByteByte:
  db "TransByteByte$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  lodsw             ; 1 2 3
  and [es:di],al    ; 3 2 5 +2*WS
  or [es:di],ah     ; 3 2 5 +2*WS
  inc di            ; 1 0 1
  movsb             ; 1 2 3 +WS       Total 17+5*WS
.endCode:


experimentTransWord:
  db "TransWord$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  lodsw             ; 1 2 3
  and [es:di],ax    ; 3 4 7 +4*WS
  lodsw             ; 1 2 3
  or [es:di],ax     ; 3 4 7 +4*WS
  inc di            ; 1 0 1
  inc di            ; 1 0 1           Total 22+8*WS
.endCode:




experimentHScrollU3:
  db "HScrollU3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
  mov ax,0x8000
  mov ss,ax
  mov bx,158
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  mov ax,[bp+1234]
  mov [si+2345],ax
.endCode:


experimentHScrollBuffer:
  db "HScrollBuffer$"
  dw .endInit - ($+2)
  mov ax,0x7000
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,158
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  movsw
  add si,bx
.endCode:



experimentMemSprite8:
  db "MemSprite8$"
  dw .endInit - ($+2)
  mov ax,0x7000
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,158
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  times 8 movsw
  add di,bx
.endCode:


experimentMemSprite9:
  db "MemSprite8$"
  dw .endInit - ($+2)
  mov ax,0x7000
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,158
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  times 9 movsw
  add di,bx
.endCode:


experimentHScroll:
  db "HScroll$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,158
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  movsw
  add di,bx
.endCode:


experimentHScrollU:
  db "HScrollU$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,158
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  movsw
  add di,bx
  add si,cx
.endCode:


experimentHScroll2:
  db "HScroll2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
  mov bx,158
  mov di,0
  mov si,0
.endInit
  dw .endCode - ($+2)
  mov word[di+1234],4567
.endCode:


experimentSprite8:
  db "Sprite8$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,144
  mov di,0
  mov si,0
  mov cx,0
.endInit
  dw .endCode - ($+2)
  mov cl,8
  rep movsw
  add di,bx
.endCode:


experimentSprite10:
  db "Sprite10$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,144
  mov di,0
  mov si,0
  mov cx,0
.endInit
  dw .endCode - ($+2)
  mov cl,10
  rep movsw
  add di,bx
.endCode:


experimentSprite8b:
  db "Sprite8b$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,144
  mov di,0
  mov si,0
  mov cx,0
.endInit
  dw .endCode - ($+2)
  movsw
  movsw
  movsw
  movsw
  movsw
  movsw
  movsw
  movsw
  add di,bx
.endCode:


experimentSprite8c:
  db "Sprite8c$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
  mov bx,144
  mov di,0
  mov si,0
  mov cx,0
.endInit
  dw .endCode - ($+2)
  mov word[di],1234
  mov word[di+2],1234
  mov word[di+4],1234
  mov word[di+6],1234
  mov word[di+8],1234
  mov word[di+10],1234
  mov word[di+12],1234
  mov word[di+14],1234
  add di,bx
.endCode:


experimentKeyboardBit:
  db "KeyboardBit$"
  dw .endInit - ($+2)
  mov dx,0x61
.endInit:
  dw .endCode - ($+2)

  rcr bl,1             ; 2 0 8  Each bit takes 40 CPU cycles = 8.38us
  mov al,bh            ; 2 0 8  = 8.87us with DRAM refresh
  rcr al,1             ; 2 0 8  = 142 cycles on the Arduino
  rcr al,1             ; 2 0 8
  out dx,al            ; 1 1 8
.endCode:


experimentSlide:
  db "IntroSlide$"
  dw .endInit - ($+2)
  mov dx,0x3d4
  mov si,0x3d9
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  add sp,[bx]   ; 2 2
  cmp sp,dx
  sbb ax,ax     ; 2 0    10

  add di,[bx+2] ; 3 2
  cmp di,dx
  adc ax,bx     ; 2 0    11

  add bp,[bx+4] ; 3 2
  cmp bp,dx
  adc ax,bx     ; 2 0    11

  add cx,[bx+6] ; 3 2
  cmp cx,dx
  adc ax,bx     ; 2 0    11

  xlatb
  out 0xe0,al

  mov ax,0x0d06
  out dx,ax

  xchg ax,di
  mov di,5678
  movsw
  movsw
  xchg ax,di
.endCode


experimentSlide2:
  db "IntroSlide2$"
  dw .endInit - ($+2)
  mov dx,0x3d4
  mov si,0x3d9
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  add sp,[bx]   ; 2 2
  cmp sp,dx
  sbb ax,ax     ; 2 0    10

  add di,[bx+2] ; 3 2
  cmp di,dx
  adc ax,bx     ; 2 0    11

  add bp,[bx+4] ; 3 2
  cmp bp,dx
  adc ax,bx     ; 2 0    11

  add cx,[bx+6] ; 3 2
  cmp cx,dx
  adc ax,bx     ; 2 0    11

  xlatb
  out 0xe0,al

  xchg ax,di
  mov di,5678
  movsw
  movsw
  movsw
  xchg ax,di
.endCode


experimentIntroCMP:
  db "IntroCMP$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  mov si,0x3d9
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  add sp,[bx]   ; 2 2
  cmp sp,dx
  sbb ax,ax     ; 2 0    10

  add di,[bx+2] ; 3 2
  cmp di,dx
  adc ax,bx     ; 2 0    11

  add bp,[bx+4] ; 3 2
  cmp bp,dx
  adc ax,bx     ; 2 0    11

  add cx,[bx+6] ; 3 2
  cmp cx,dx
  adc ax,bx     ; 2 0    11

  xlatb
  out 0xe0,al

  mov al,[ss:bx+12]
  out dx,al

  xchg ax,di
  mov di,5678
  movsw
  movsw
  xchg ax,di
.endCode

experimentIntroCMP_NoRaster:
  db "IntroCMP_NoRaster$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  mov si,0x3d9
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  add sp,[bx]   ; 2 2
  cmp sp,dx
  sbb ax,ax     ; 2 0    10

  add di,[bx+2] ; 3 2
  cmp di,dx
  adc ax,bx     ; 2 0    11

  add bp,[bx+4] ; 3 2
  cmp bp,dx
  adc ax,bx     ; 2 0    11

  add cx,[bx+6] ; 3 2
  cmp cx,dx
  adc ax,bx     ; 2 0    11

  xlatb
  out 0xe0,al

  xchg ax,di
  mov di,5678
  movsw
  movsw
  movsw
  xchg ax,di
.endCode



experimentIntro:
  db "Intro$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  mov si,0x3d9
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  add sp,[bx]   ; 2 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  sbb ax,ax     ; 2 0    10

  add di,[bx+2] ; 3 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  adc ax,bx     ; 2 0    11

  add bp,[bx+4] ; 3 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  adc ax,bx     ; 2 0    11

  add cx,[bx+6] ; 3 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  adc ax,bx     ; 2 0    11

  xlatb
  out 0xe0,al

  mov al,[ss:bx+12]
  out dx,al

  xchg ax,di
  mov di,5678
  movsw
  movsb
  xchg ax,di
.endCode


experimentIntroB:
  db "Intro$"
  dw .endInit - ($+2)
  mov dx,0xe0
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  add sp,[bx]   ; 2 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  sbb ax,ax     ; 2 0    10

  add di,[bx+2] ; 3 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  adc ax,bx     ; 2 0    11

  add bp,[bx+4] ; 3 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  adc ax,bx     ; 2 0    11

  add cx,[bx+6] ; 3 2
  lahf          ; 1 0
  rcl ah,1      ; 3 0
  adc ax,bx     ; 2 0    11

  xlatb
  out 0xe0,al

  xchg ax,di
  mov di,5678
  movsw
  movsw
  movsb
  xchg ax,di

.endCode

experimentMod:
  db "Mod$"
  dw .endInit - ($+2)
  mov dx,0x3d9
.endInit:
  dw .endCode - ($+2)
  xor ax,ax

  add si,[bp]
  mov bx,si
  mov bl,99
  mov al,[bx]

  add di,[bp+2]
  mov bx,di
  mov bl,99
  add al,[bx]

  add cx,[bp+4]
  mov bx,cx
  mov bl,99
  add al,[bx]

  add sp,[bp+6]
  mov bx,sp
  mov bl,99
  add al,[bx]

  out 0xe0,al

  out dx,al
.endCode


experimentIntro2:
  db "Intro2$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  xor si,si
  xor di,di
  xor bp,bp
  xor cx,cx
  mov [bx],si
  mov [bx+2],si
  mov [bx+4],si
  mov [bx+6],si

.endInit:
  dw .endCode - ($+2)
  xor ax,ax

  add si,[bx]   ; 2 2
  js .p1
  inc ax
.p1:

  add di,[bx+2] ; 3 2
  js .p2
  inc ax
.p2:

  add bp,[bx+4] ; 3 2
  js .p3
  inc ax
.p3:

  add cx,[bx+6] ; 3 2
  js .p4
  inc ax
.p4:

  xlatb
  out 0xe0,al

  pop ax
  out dx,al
.endCode

experimentIntro2b:
  db "Intro2b$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  xor si,si
  xor di,di
  xor bp,bp
  xor cx,cx
  mov [bx],si
  mov [bx+2],si
  mov [bx+4],si
  mov [bx+6],si
.endInit:
  dw .endCode - ($+2)
  xor ax,ax

  add si,[bx]   ; 2 2
  jns .p1
  inc ax
.p1:

  add di,[bx+2] ; 3 2
  jns .p2
  inc ax
.p2:

  add bp,[bx+4] ; 3 2
  jns .p3
  inc ax
.p3:

  add cx,[bx+6] ; 3 2
  jns .p4
  inc ax
.p4:

  xlatb
  out 0xe0,al

  pop ax
  out dx,al
.endCode



experimentMagi1:
  db "Magi1$"
  dw .endInit - ($+2)

  mov ax,0xb800
  mov es,ax
  mov di,0
  mov si,0
  mov ax,0x8000
  mov ds,ax
.endInit:
  dw .endCode - ($+2)

  movsw
  movsw
  add di,76

.endCode

experimentMagi2:
  db "Magi2$"
  dw .endInit - ($+2)

  mov ax,0xb800
  mov es,ax
  mov di,0
  mov si,0
  mov ax,0x8000
  mov ds,ax
.endInit:
  dw .endCode - ($+2)

  movsb
  inc di
  movsb
  add di,77

.endCode


experimentDomKeyb:
  db "DomKeyb$"
  dw .endInit - ($+2)

  mov ax,0x8000
  mov es,ax
  mov dx,0xe0
  mov si,0
.endInit:
  dw .endCode - ($+2)

xchg ax,bx    ; bx=?, ax=0
out dx,al
xchg ax,cx    ; cx=0, ax=1
out dx,al
xchg ax,bx    ; ax=?, bx=1
in al,0xe0
stosb
xchg ax,cx    ; cx=?, ax=0
out dx,al
xchg ax,bx    ; bx=0, ax=1
out dx,al
xchg ax,cx    ; cx=1, ax=?
in al,0xe0
stosb

.endCode


experimentMod1:
  db "Mod1$"
  dw .endInit - ($+2)

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add bp,0x0f0f
  mov bx,bp
  mov bl,0x0f
  mov al,[bx]
  add si,0x0f0f
  mov bx,si
  mov bl,0x0f
  add al,[bx]
  add di,0x0f0f
  mov bx,di
  mov bl,0x0f
  add al,[bx]
  add dx,0x0f0f
  mov bx,dx
  mov bl,0x0f
  add al,[bx]
  out 0xe0,al
  loop .endInit+2

  pop bx
  pop word[cs:bx]
  mov cl,1
  jmp $+2

.endCode


experimentMod2:
  db "Mod2$"
  dw .endInit - ($+2)

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add dl,0x0f
  adc si,-1
  lodsb
  add dh,0x0f
  adc bp,0
  add al,[ds:bp]
  add ch,0x0f
  adc di,0
  add al,[di]
  add cl,0x0f
  adc bx,0
  add al,[bx]
  out 0xe0,al
  dec ah
  jnz .endInit+2

  xchg ax,bx
  pop bx
  pop word[cs:bx]
  xchg ax,bx
  mov ah,1
  jmp $+2

.endCode


experimentMod2a:
  db "Mod2a$"
  dw .endInit - ($+2)

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  nop

  add dl,0x0f
  adc si,-1
  lodsb
  add dh,0x0f
  adc bp,0
  add al,[ds:bp]
  add ch,0x0f
  adc di,0
  add al,[di]
  add cl,0x0f
  adc bx,0
  add al,[bx]
  out 0xe0,al
  dec ah
  jnz .endInit+2

  xchg ax,bx
  pop bx
  pop word[cs:bx]
  xchg ax,bx
  mov ah,1
  jmp $+2

.endCode





experimentMod1_17:
  db "Mod1-17$"
  dw .endInit - ($+2)

  mov al,TIMER1 | LSB | MODE2 | BINARY
  out 0x43,al
  mov al,17
  out 0x41,al  ; Timer 1 rate

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add bp,0x0f0f
  mov bx,bp
  mov bl,0x0f
  mov al,[bx]
  add si,0x0f0f
  mov bx,si
  mov bl,0x0f
  add al,[bx]
  add di,0x0f0f
  mov bx,di
  mov bl,0x0f
  add al,[bx]
  add dx,0x0f0f
  mov bx,dx
  mov bl,0x0f
  add al,[bx]
  out 0xe0,al
  loop .endInit+2

  pop bx
  pop word[cs:bx]
  mov cl,1
  jmp $+2

.endCode


experimentMod1_19:
  db "Mod1-19$"
  dw .endInit - ($+2)

  mov al,TIMER1 | LSB | MODE2 | BINARY
  out 0x43,al
  mov al,19
  out 0x41,al  ; Timer 1 rate

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add bp,0x0f0f
  mov bx,bp
  mov bl,0x0f
  mov al,[bx]
  add si,0x0f0f
  mov bx,si
  mov bl,0x0f
  add al,[bx]
  add di,0x0f0f
  mov bx,di
  mov bl,0x0f
  add al,[bx]
  add dx,0x0f0f
  mov bx,dx
  mov bl,0x0f
  add al,[bx]
  out 0xe0,al
  loop .endInit+2

  pop bx
  pop word[cs:bx]
  mov cl,1
  jmp $+2

.endCode


experimentMod2a_17:
  db "Mod2a-17$"
  dw .endInit - ($+2)

  mov al,TIMER1 | LSB | MODE2 | BINARY
  out 0x43,al
  mov al,17
  out 0x41,al  ; Timer 1 rate

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add dl,0x0f
  adc si,-1
  lodsb
  add dh,0x0f
  adc bp,0
  add al,[ds:bp]
  add ch,0x0f
  adc di,0
  add al,[di]
  add cl,0x0f
  adc bx,0
  add al,[bx]
  out 0xe0,al
  dec ah
  jnz .endInit+2

  xchg ax,bx
  pop bx
  pop word[cs:bx]
  xchg ax,bx
  mov ah,1
  jmp $+2

.endCode


experimentMod2a_19:
  db "Mod2a-19$"
  dw .endInit - ($+2)

  mov al,TIMER1 | LSB | MODE2 | BINARY
  out 0x43,al
  mov al,19
  out 0x41,al  ; Timer 1 rate

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add dl,0x0f
  adc si,-1
  lodsb
  add dh,0x0f
  adc bp,0
  add al,[ds:bp]
  add ch,0x0f
  adc di,0
  add al,[di]
  add cl,0x0f
  adc bx,0
  add al,[bx]
  out 0xe0,al
  dec ah
  jnz .endInit+2

  xchg ax,bx
  pop bx
  pop word[cs:bx]
  xchg ax,bx
  mov ah,1
  jmp $+2

.endCode

experimentMod2:
  db "Mod2$"
  dw .endInit - ($+2)

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add dl,0x0f
  adc si,-1
  lodsb
  add dh,0x0f
  adc bp,0
  add al,[ds:bp]
  add ch,0x0f
  adc di,0
  add al,[di]
  add byte[0xffff],0x0f
  adc bx,0
  add al,[bx]
  out 0xe0,al
  dec cl
  jnz .endInit+2

  xchg ax,bx
  pop bx
  pop word[cs:bx]
  xchg ax,bx
  mov cl,1
  jmp $+2

.endCode


experimentMod2_17:
  db "Mod2-17$"
  dw .endInit - ($+2)

  mov al,TIMER1 | LSB | MODE2 | BINARY
  out 0x43,al
  mov al,17
  out 0x41,al  ; Timer 1 rate

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add dl,0x0f
  adc si,-1
  lodsb
  add dh,0x0f
  adc bp,0
  add al,[ds:bp]
  add ch,0x0f
  adc di,0
  add al,[di]
  add byte[0xffff],0x0f
  adc bx,0
  add al,[bx]
  out 0xe0,al
  dec cl
  jnz .endInit+2

  xchg ax,bx
  pop bx
  pop word[cs:bx]
  xchg ax,bx
  mov cl,1
  jmp $+2

.endCode


experimentMod2_19:
  db "Mod2-19$"
  dw .endInit - ($+2)

  mov al,TIMER1 | LSB | MODE2 | BINARY
  out 0x43,al
  mov al,19
  out 0x41,al  ; Timer 1 rate

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1

.endInit:
  dw .endCode - ($+2)

  add dl,0x0f
  adc si,-1
  lodsb
  add dh,0x0f
  adc bp,0
  add al,[ds:bp]
  add ch,0x0f
  adc di,0
  add al,[di]
  add byte[0xffff],0x0f
  adc bx,0
  add al,[bx]
  out 0xe0,al
  dec cl
  jnz .endInit+2

  xchg ax,bx
  pop bx
  pop word[cs:bx]
  xchg ax,bx
  mov cl,1
  jmp $+2

.endCode


experimentUnp1:
  db "Unp1$"
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

   mov dx,[bp+6]
   mov ax,[bp+4]
   mov bx,ax
   and ax,0xF
   mov cl,4
   shr bx,cl
   mov cl,12
   shl dx,cl
   add dx,bx

.endCode

experimentUnp2:
  db "Unp2$"
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

   mov dx,[bp+6]
   mov ax,[bp+4]
   mov bx,ax
   and ax,0xF
   and bx,0xFFF0
   or dx,bx
   mov cl,4
   ror dx,cl

.endCode

experimentUnp3:
  db "Unp3$"
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

   mov dx,[bp+6]
   mov ax,[bp+4]
   mov bx,ax
   and ax,0xF
   and bx,0xFFF0
   and dx,0xf
   or dx,bx
   mov cl,4
   ror dx,cl

.endCode

experimentUnp4:
  db "Unp4$"
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

   mov dx,[bp+6]
   mov ax,[bp+4]
   mov bx,ax
   and ax,0xF
   and bx,0xFFF0
   or dx,bx
   ror dx,1
   ror dx,1
   ror dx,1
   ror dx,1

.endCode

experimentUnp5:
  db "Unp5$"
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

   mov dx,[bp+6]
   mov ax,[bp+4]
   mov bx,ax
   and ax,0xF
   and bx,0xFFF0
   and dx,0xf
   or dx,bx
   ror dx,1
   ror dx,1
   ror dx,1
   ror dx,1

.endCode





experimentWater:
  db "Water$"
  dw .endInit - ($+2)
  mov ax,0x8000
  mov ds,ax
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov bh,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  mov ax,[si]
  sub al,ah
  sub al,[si-1]
  sub al,[si+40]
  sub al,[si-40]
  shr al,1
  shr al,1
  mov ah,[si+40*25]
  add ah,al
  mov [si+40*25],ah
  shr ah,1
  shr ah,1
  mov bl,[si+2*40*25]
  add bl,ah
  mov [si+2*40*25],bl
  mov ax,[bx]
  stosw
.endCode

experimentAmiga19:
  db "Amiga19$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  mov ax,1
  mov bx,2
  mov cx,3
  mov di,4
  mov bp,5
  mov sp,6
  mov si,7
  mov ax,0x8000
  mov ds,ax
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  lodsb
  out 0xe0,al
  mov al,1
.endCode:

experimentAmiga76:
  db "Amiga76$"
  dw .endInit - ($+2)
  mov dx,0x3d9
  mov ax,1
  mov bx,2
  mov cx,3
  mov di,4
  mov bp,5
  mov sp,6
  mov si,7
  mov ax,0x8000
  mov ds,ax
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  out dx,al
  xchg ax,di
  out dx,al
  xchg ax,bp
  out dx,al
  xchg ax,sp
  out dx,al
  xchg ax,bx
  out dx,al
  xchg ax,cx
  lodsb
  out 0xe0,al
  mov al,1
  nop
  nop
  nop
.endCode:

experimentHammerPalette:
  db "HammerPalette$"
  dw .endInit - ($+2)
  mov dx,0x3d9
.endInit:
  dw .endCode - ($+2)
  mov al,0xff
  out dx,al
.endCode:

experimentHammerPalette2:
  db "HammerPalette2$"
  dw .endInit - ($+2)
  mov dx,0x3d9
.endInit:
  dw .endCode - ($+2)
  out dx,al
  xchg ax,bx
.endCode:

experimentBillionsUpdate:
  db "BillionsUpdate$"
  dw .endInit - ($+2)
  mov di,0
  mov bp,160-8
  xor bx,bx
  mov ax,0x8000
  mov ds,ax
  mov ax,0xb800
  mov es,ax
  mov si,12
  mov dx,0x8000
.endInit:
  dw .endCode - ($+2)
  add bx,dx
  adc si,cx
  times 4 movsw
  add di,bp
.endCode:


experimentBillions:
  db "Billions$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov di,0x3fff
  mov dx,0x3d4
  cld
  mov ax,0xffff
  mul ah
.endInit:
  dw .endCode - ($+2)

  mov ax,0x0401
  out dx,ax
  mov ax,0x0a00
  out dx,ax
  mov ax,0x5001
  out dx,ax
  mov ax,0x6600
  out dx,ax
  stosb
  dec di
  times 38 nop

.endCode:

experimentBillions2:
  db "Billions2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov di,0x3fff
  mov dx,0x3d4
  cld
  mov ax,0xffff
  mul ah
.endInit:
  dw .endCode - ($+2)

  mov ax,0x0401
  out dx,ax
  mov ax,0x0a00
  out dx,ax
  mov ax,0x5001
  out dx,ax
  mov ax,0x6600
  out dx,ax
  stosb
  dec di
  times 33 nop
  db 0xe9, 0x00, 0x00

.endCode:


experimentHammerPalette:
  db "HammerPalette$"
  dw .endInit - ($+2)
  mov dx,0x3d9
.endInit:
  dw .endCode - ($+2)
  mov al,0xff
  out dx,al
.endCode:

experimentHammerPalette2:
  db "HammerPalette2$"
  dw .endInit - ($+2)
  mov dx,0x3d9
.endInit:
  dw .endCode - ($+2)
  out dx,al
  xchg ax,bx
.endCode:

experimentBillions:
  db "Billions$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov di,0x3fff
  mov dx,0x3d4
  cld
  mov ax,0xffff
  mul ah
.endInit:
  dw .endCode - ($+2)

  mov ax,0x0401
  out dx,ax
;  mov ax,0x0a00
;  out dx,ax
;  mov ax,0x5001
;  out dx,ax
;  mov ax,0x6600
;  out dx,ax
;  stosb
;  dec di
;  times 38 nop

.endCode:



experimentSweep:
  db "Sweep$"
  dw .endInit - ($+2)

  mov di,0xffff
  mov bx,di
  mov cx,di

.endInit:
  dw .endCode - ($+2)

  mov ax,bx  ; high word                         ffff
  mul di     ;                                  *ffff = fffe:0001
  mov bx,dx  ; new high word                     fffe
  xchg cx,ax ; low word <-> new low word              0001 <> ffff
  mul di     ;                                  *ffff = fffe:0001
  add cx,dx  ;                                               ffff
  adc bx,0   ;                                          fffe
  mov al,bl
  out 0xe0,al
  mov al,bh
  out 0xe0,al
  cmp bx,0
  jne .loopTop
.loopTop:

.endCode:


experimentSweepEven:
  db "SweepEven$"
  dw .endInit - ($+2)

  mov di,0xffff
  mov bx,di
  mov cx,di

.endInit:
  dw .endCode - ($+2)

  mov ax,bx  ; high word                         ffff
  mul di     ;                                  *ffff = fffe:0001
  mov bx,dx  ; new high word                     fffe
  xchg cx,ax ; low word <-> new low word              0001 <> ffff
  mul di     ;                                  *ffff = fffe:0001
  add cx,dx  ;                                               ffff
  adc bx,0   ;                                          fffe
  mov al,bl
  and al,0xfe
  out 0xe0,al
  mov al,bh
  out 0xe0,al
  cmp bx,0
  jne .loopTop
.loopTop:



experimentKefrensScanline0:
  db "KefrensScanline0$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov ax,0x4567
  mov ds,ax
  mov sp,[bx]
  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop cx
  and ax,cx          ; 2 0
  pop cx
  or ax,cx           ; 2 0
  stosw              ; 2 2 +WS +WS
  pop ax
  and ah,[es:di+1]
  pop cx
  or ax,cx
  stosw
  pop ax
  out dx,al
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline199_200:
  db "KefrensScanline199_200$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov ax,0x4567
  mov ds,ax
  mov sp,[bx]
  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop cx
  and ax,cx          ; 2 0
  pop cx
  or ax,cx           ; 2 0
  stosw              ; 2 2 +WS +WS
  pop ax
  and ah,[es:di+1]
  pop cx
  or ax,cx
  stosw
  pop ax
  out dx,al
  mov ds,bp
  lodsb
  out 0xe0,al

  mov dl,0xd4
  mov ax,0x3b04
  out dx,ax
  times 45 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline200:
  db "KefrensScanline200$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov dl,0xd4
  mov ax,0x3b04
  out dx,ax
  times 45 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline200_201:
  db "KefrensScanline200_201$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov dl,0xd4
  mov ax,0x3b04
  out dx,ax
  times 45 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline201:
  db "KefrensScanline201$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline201_202:
  db "KefrensScanline201_202$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  xor di,di
  xor ax,ax
  nop
  nop
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline202:
  db "KefrensScanline202$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  xor di,di
  xor ax,ax
  nop
  nop
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline202_203:
  db "KefrensScanline202_203$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  xor di,di
  xor ax,ax
  nop
  nop
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  xor ax,ax
  times 4 nop
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline203:
  db "KefrensScanline203$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  xor ax,ax
  times 4 nop
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline211_212:
  db "KefrensScanline211_212$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  xor ax,ax
  times 4 nop
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline258_259:
  db "KefrensScanline258_259$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline258_259a:
  db "KefrensScanline258_259a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline258_259b:
  db "KefrensScanline258_259b$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline258_259c:
  db "KefrensScanline258_259c$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259:
  db "KefrensScanline259$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259a:
  db "KefrensScanline259a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259b:
  db "KefrensScanline259b$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259c:
  db "KefrensScanline259c$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259_260:
  db "KefrensScanline259_260$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259a_260:
  db "KefrensScanline259a_260$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259b_260:
  db "KefrensScanline259b_260$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259c_260:
  db "KefrensScanline259c_260$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259_260a:
  db "KefrensScanline259_260a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259a_260a:
  db "KefrensScanline259a_260a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259b_260a:
  db "KefrensScanline259b_260a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline259c_260a:
  db "KefrensScanline259c_260a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  times 2 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .effectComplete
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  je .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.effectComplete:
.frameLoop:
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:


experimentKefrensScanline260:
  db "KefrensScanline260$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline260a:
  db "KefrensScanline260a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline260_261:
  db "KefrensScanline260_261$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline260a_261:
  db "KefrensScanline260a_261$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)
  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  mov bx,[cs:dummy]
  mov si,[cs:bx]
  inc bx
  inc bx
  cmp bx,0xffff
  je .noRestartSong
  mov bx,0x0100
.noRestartSong:
  mov [cs:dummy],bx
  times 15 nop
  mov ax,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:

experimentKefrensScanline261_0:
  db "KefrensScanline261_0$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bp,0x8000
  mov ds,bp
  mov ss,bp
  xor si,si
  mov bx,si
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)

  times 56 nop
  mov al,[es:di]
  mov ds,bp
  lodsb
  out 0xe0,al

  mov ax,0x4567
  mov ds,ax
  mov sp,[bx]
  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop cx
  and ax,cx          ; 2 0
  pop cx
  or ax,cx           ; 2 0
  stosw              ; 2 2 +WS +WS
  pop ax
  and ah,[es:di+1]
  pop cx
  or ax,cx
  stosw
  pop ax
  out dx,al
  mov ds,bp
  lodsb
  out 0xe0,al
.endCode:





experimeentJJ:
  db "pearce_jj$"
  dw .endCode - ($+2)
  mov dx,0x3d8
  mov ax,0x9000
  mov es,ax
  mov di,0
.l:
  in ax,dx
  stosw
  loop .l
.endCode

experiment1:
  db "samples 1$"
  dw .endCode - ($+2)

  mov al,TIMER2 | LSB | MODE1 | BINARY
  out 0x43,al
  mov dx,0x42
  mov ax,0x8000
  mov ds,ax
  mov si,0
  mov di,0
  sub di,cx
  mov cl,5      ;5
.l:
  pop bx        ;nnnnnnnnnnnSSSSS
  mov al,bl
  and al,0x1f
  out dx,al
  shr bx,cl     ;00000nnnnnnSSSSS
  mov al,bl
  and al,0x1f
  out dx,al
  shr bx,cl     ;0000000000nSSSSS
  mov al,bl
  and al,0x1f
  out dx,al
  lodsb
  add si,4
  shr al,1
  shr al,1
  and al,0x1f
  out dx,al
  pop bx        ;nnnnnnSSSSSppppp
  shr bx,cl     ;00000nnnnnnSSSSS
  mov al,bl
  and al,0x1f
  out dx,al
  shr bx,cl     ;0000000000nSSSSS
  mov al,bl
  and al,0x1f
  out dx,al
  dec sp
  pop bx        ;nnnnnnnnnnSSSSSp
  shr bx,1      ;0nnnnnnnnnnSSSSS
  mov al,bl
  and al,0x1f
  out dx,al
  shr bx,cl     ;000000nnnnnSSSSS
  mov al,bl
  and al,0x1f
  out dx,al
  shr bx,cl     ;00000000000SSSSS
  mov al,bl
  out dx,al
  add di,1
  jnz .l
.endCode






experimentSweep:
  db "Sweep$"
  dw .endInit - ($+2)

  mov di,0xffff
  mov bx,di
  mov cx,di

.endInit:
  dw .endCode - ($+2)

  mov ax,bx  ; high word                         ffff
  mul di     ;                                  *ffff = fffe:0001
  mov bx,dx  ; new high word                     fffe
  xchg cx,ax ; low word <-> new low word              0001 <> ffff
  mul di     ;                                  *ffff = fffe:0001
  add cx,dx  ;                                               ffff
  adc bx,0   ;                                          fffe
  mov al,bl
  out 0xe0,al
  mov al,bh
  out 0xe0,al
  cmp bx,0
  jne .loopTop
.loopTop:

.endCode:


experimentSweepEven:
  db "SweepEven$"
  dw .endInit - ($+2)

  mov di,0xffff
  mov bx,di
  mov cx,di

.endInit:
  dw .endCode - ($+2)

  mov ax,bx  ; high word                         ffff
  mul di     ;                                  *ffff = fffe:0001
  mov bx,dx  ; new high word                     fffe
  xchg cx,ax ; low word <-> new low word              0001 <> ffff
  mul di     ;                                  *ffff = fffe:0001
  add cx,dx  ;                                               ffff
  adc bx,0   ;                                          fffe
  mov al,bl
  and al,0xfe
  out 0xe0,al
  mov al,bh
  out 0xe0,al
  cmp bx,0
  jne .loopTop
.loopTop:

.endCode:







experimentKefrensBlank:
  db "KefrensBlank$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
.endInit:
  dw .endCode - ($+2)

  times 64 nop
  mov al,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:




experimentKefrensR:
  db "KefrensR$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  mov cx,0x8000
.endInit:
  dw .endCode - ($+2)

  mov ax,0x4567
  mov ds,ax
  mov sp,[bx]

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS

  pop ax
  out dx,al
  mov ds,cx

  lodsb
  out 0xe0,al

.endCode:




experimentKefrens259:
  db "Kefrens259$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bx,0
.endInit:
  dw .endCode - ($+2)

  times 6 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .frameLoop
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  cmp bx,0xffff
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.frameLoop:
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:

experimentKefrens259a:
  db "Kefrens259a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bx,0
.endInit:
  dw .endCode - ($+2)

  times 6 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .frameLoop
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  db 0x81, 0xfb, 0x01, 0x00  ;cmp bx,1
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.frameLoop:
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:

experimentKefrens259k:
  db "Kefrens259k$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bx,0
.endInit:
  dw .endCode - ($+2)

  times 6 nop                             ; 6 0
  ; See if the keyboard has sent a byte
  in al,0x20                              ; 2 1
  and al,2                                ; 3 0
  jnz .noKey                              ; 2 0
  ; Read byte from keyboard
  in al,0x60                              ; 2 1
  mov ah,al                               ; 2 0
  ; Acknowledge keyboard
  in al,0x61                              ; 2 1
  or al,0x80                              ; 3 0
  out 0x61,al                             ; 2 1
  and al,0x7f                             ; 3 0
  out 0x61,al                             ; 2 1
  ; Check for Escape
  cmp ah,1                                ; 3 0
  je .frameLoop                           ; 2 0
  jmp .doneKey                            ; 2 1
.noKey:
  times 28 nop
.doneKey:
  inc bx                                  ; 1 0
  inc bx                                  ; 1 0
  cmp bx,0xffff                           ; 3 0
  jne .noNewLoop                          ; 2 2
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop                          ; 2 3
.frameLoop:
  mov ax,[es:di]                          ; 3 2
  mov ds,cx                               ; 2 0
  lodsb                                   ; 1 1
  out 0xe0,al                             ; 2 1

.endCode:

experimentKefrens259ak:
  db "Kefrens259ak$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bx,0
.endInit:
  dw .endCode - ($+2)

  times 6 nop
  ; See if the keyboard has sent a byte
  in al,0x20
  and al,2
  jnz .noKey
  ; Read byte from keyboard
  in al,0x60
  mov ah,al
  ; Acknowledge keyboard
  in al,0x61
  or al,0x80
  out 0x61,al
  and al,0x7f
  out 0x61,al
  ; Check for Escape
  cmp ah,1
  je .frameLoop
  jmp .doneKey
.noKey:
  times 28 nop
.doneKey:
  inc bx
  inc bx
  db 0x81, 0xfb, 0x01, 0x00  ;cmp bx,1
  jne .noNewLoop
  mov bx,0x80
.noNewLoop:
  jmp .frameLoop
.frameLoop:
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:


experimentKefrens5C:
  db "Kefrens5C$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  mov bp,0x8000
.endInit:
  dw .endCode - ($+2)
  mov di,[cs:bx-0x80]
  mov sp,[ss:di+0x4567]  ; mulTable is a different 157-element table per scanline

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop cx
  and ax,cx          ; 2 0
  pop cx
  or ax,cx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop cx
  and al,cl
  or al,ch
  stosb              ; 1 1 +WS

  mov ax,0x4567
  mov ds,ax
  mov al,[bx-0x80]
  out dx,al
  mov ds,bp

  lodsb
  out 0xe0,al

.endCode:



experimentKefrens259:
  db "Kefrens259$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bp,0
.endInit:
  dw .endCode - ($+2)

  times 35 nop
  cmp byte[cs:0xffff],1
  je .frameLoop
  inc bp
  inc bp
  cmp bp,0xffff
  jne .noNewLoop
  xor bp,bp
.noNewLoop:
  jmp .frameLoop
.frameLoop:
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:

experimentKefrens259a:
  db "Kefrens259a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bp,0
.endInit:
  dw .endCode - ($+2)

  times 35 nop
  cmp byte[cs:0xffff],1
  je .frameLoop
  inc bx
  inc bx
  db 0x81, 0xfb, 0x01, 0x00  ;cmp bx,1
  jne .noNewLoop
  mov bx,0x80
;  xor bp,bp
;  nop
.noNewLoop:
  jmp .frameLoop
.frameLoop:
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:


experimentKefrens5B:
  db "Kefrens5B$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  mov cx,0x8000
.endInit:
  dw .endCode - ($+2)
  mov di,[cs:bx+127]
  mov sp,[ss:di+0x4567]  ; mulTable is a different 157-element table per scanline

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop cx
  and ax,cx          ; 2 0
  pop cx
  or ax,cx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop cx
  and al,cl
  or al,ch
  stosb              ; 1 1 +WS

  mov ax,0x4567
  mov ds,ax
  mov al,[bx-0x80]
  out dx,al
  mov ds,bp

  lodsb
  out 0xe0,al

.endCode:

experimentKefrens202:
  db "Kefrens202$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bp,0
.endInit:
  dw .endCode - ($+2)

  xor ax,ax
  nop
  nop
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  stosw
  mov al,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:


experimentKefrens259:
  db "Kefrens259$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bp,0
.endInit:
  dw .endCode - ($+2)

  times 35 nop
  cmp byte[cs:0xffff],1
  je .frameLoop
  inc bp
  inc bp
  cmp bp,0xffff
  jne .noNewLoop
  xor bp,bp
.noNewLoop:
  jmp .frameLoop
.frameLoop:
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:

experimentKefrens259a:
  db "Kefrens259a$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
  mov word[cs:0xffff],0
  mov bp,0
.endInit:
  dw .endCode - ($+2)

  times 35 nop
  cmp byte[cs:0xffff],1
  je .frameLoop
  inc bp
  inc bp
  db 0x81, 0xfd, 0x01, 0x00  ;cmp bp,1
  jne .noNewLoop
  xor bp,bp
  nop
.noNewLoop:
  jmp .frameLoop
.frameLoop:
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:


experimentKefrens200:
  db "Kefrens200$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)

  mov dl,0xd4
  mov ax,0x3b04
  out dx,ax
  times 50 nop
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:



experimentKefrens260:
  db "Kefrens260$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
  mov dx,0x3d4
.endInit:
  dw .endCode - ($+2)

  mov ax,0x0104
  out dx,ax
  mov dl,0xd9
  times 50 nop
  mov ax,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:





experimentKefrensBlank:
  db "KefrensBlank$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  xor di,di
.endInit:
  dw .endCode - ($+2)

  times 62 nop
  mov al,[es:di]
  mov ds,cx
  lodsb
  out 0xe0,al

.endCode:



experimentKefrens5:
  db "Kefrens5$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov sp,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS

  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrens5Sys:
  db "Kefrens5Sys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov sp,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS

  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrens5A:
  db "Kefrens5A$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  mov cx,0x8000
.endInit:
  dw .endCode - ($+2)
  mov bx,[cs:bp+127]
  mov sp,[ss:bx+0x4567]  ; mulTable is a different 157-element table per scanline

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS

  mov ax,0x4567
  mov ds,ax
  mov al,[bp]
  out dx,al
  mov ds,cx

  lodsb
  out 0xe0,al

.endCode:

experimentKefrens5ASys:
  db "Kefrens5ASys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  mov cx,0x8000
.endInit:
  dw .endCode - ($+2)
  mov bx,[cs:bp+127]
  mov sp,[ss:bx+0x4567]  ; mulTable is a different 157-element table per scanline

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS

  mov ax,0x4567
  mov ds,ax
  mov al,[bp]
  out dx,al
  mov ds,cx

  lodsb
  out 0xe0,al

.endCode:




experimentMoire32:
  db "Moire32$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov di,0
  mov cx,2
  mov dx,0xe0
.endInit:
  dw .endCode - ($+2)

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di

  cs lodsb
  out dx,al

  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  cs lodsb
  out dx,al

;  add sp,stride-40
;  add bp,stride
.endCode:

experimentMoire32Sys:
  db "Moire32Sys$"
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  mov di,0
  mov cx,2
  mov dx,0xe0
.endInit:
  dw .endCode - ($+2)

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di

  cs lodsb
  out dx,al

  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di

  cs lodsb
  out dx,al

;  add sp,stride-40
;  add bp,stride
.endCode:




experimentKefrensDE:
  db "KefrensDE$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  mov ax,0xb975
  test di,0x4000
  jz .even

  mov al,[es:di]     ; 3 1 +WS
  and al,0x0F
  or al,0x50
  stosb
  mov ah,[es:di+1]
  and ax,0xF000
  or ax,0x0B97

.even:
  stosw

  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrensDESys:
  db "KefrensDESys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  mov ax,0xb975
  test di,0x4000
  jz .even

  mov al,[es:di]     ; 3 1 +WS
  and al,0x0F
  or al,0x50
  stosb
  mov ah,[es:di+1]
  and ax,0xF000
  or ax,0x0B97

.even:
  stosw

  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrensDO:
  db "KefrensDO$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  mov ax,0xb975
  test di,0x4000
  jnz .even

  mov al,[es:di]     ; 3 1 +WS
  and al,0x0F
  or al,0x50
  stosb
  mov ah,[es:di+1]
  and ax,0xF000
  or ax,0x0B97

.even:
  stosw

  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrensDOSys:
  db "KefrensDOSys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  mov ax,0xb975
  test di,0x4000
  jnz .even

  mov al,[es:di]     ; 3 1 +WS
  and al,0x0F
  or al,0x50
  stosb
  mov ah,[es:di+1]
  and ax,0xF000
  or ax,0x0B97

.even:
  stosw

  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrensDO0:
  db "KefrensDO0$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  test di,0x4000
  jnz .even

  mov al,[es:di]     ; 3 1 +WS
  and ax,0x000F
  or ax,0x9750
  stosw
  mov al,[es:di]
  and al,0xF0
  or al,0x0B
  stosb

  jmp .done
.even:

  mov ax,0xb975
  stosw

.done:
  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrensDO0Sys:
  db "KefrensDO0Sys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  test di,0x4000
  jnz .even

  mov al,[es:di]     ; 3 1 +WS
  and ax,0x000F
  or ax,0x9750
  stosw
  mov al,[es:di]
  and al,0xF0
  or al,0x0B
  stosb

  jmp .done
.even:

  mov ax,0xb975
  stosw

.done:
  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrens6:
  db "Kefrens6$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  inc bx
  and bx,0x1ff
  mov bx,[bx]
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  test di,0x4000
  jnz .even

  mov al,[es:di]     ; 3 1 +WS
  and ax,0x000F
  or ax,0x9750
  stosw
  mov al,[es:di]
  and al,0xF0
  or al,0x0B
  stosb

  jmp .done
.even:

  mov ax,0xb975
  stosw

.done:
  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:

experimentKefrens6Sys:
  db "Kefrens6Sys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  inc bx
  and bx,0x1ff
  mov bx,[bx]
  mov di,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  test di,0x4000
  jnz .even

  mov al,[es:di]     ; 3 1 +WS
  and ax,0x000F
  or ax,0x9750
  stosw
  mov al,[es:di]
  and al,0xF0
  or al,0x0B
  stosb

  jmp .done
.even:

  mov ax,0xb975
  stosw

.done:
  mov al,[bp]
  inc bp
  out dx,al

  ss lodsb
  out 0xe0,al

.endCode:


experimentKefrens2:
  db "Kefrens2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  lodsw              ; 1 2
  xchg ax,di         ; 1 0
  mov bl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and bx,ax          ; 2 0
  lodsw              ; 1 2
  or bx,ax           ; 2 0
  xchg ax,bx         ; 1 0
  stosw              ; 2 2 +WS +WS
  mov bl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and bl,al          ; 2 0
  or bl,ah           ; 2 0
  xchg ax,bx         ; 1 0
  stosb              ; 1 1 +WS
.endCode:

experimentKefrens2Sys:
  db "Kefrens2Sys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  lodsw              ; 1 2
  xchg ax,di         ; 1 0
  mov bl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and bx,ax          ; 2 0
  lodsw              ; 1 2
  or bx,ax           ; 2 0
  xchg ax,bx         ; 1 0
  stosw              ; 2 2 +WS +WS
  mov bl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and bl,al          ; 2 0
  or bl,ah           ; 2 0
  xchg ax,bx         ; 1 0
  stosb              ; 1 1 +WS
.endCode:

experimentKefrens2P:
  db "Kefrens2P$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  mov sp,0
.endInit:
  dw .endCode - ($+2)
  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS
.endCode:

experimentKefrens2PSys:
  db "Kefrens2PSys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov si,0
  mov word[si],0
  mov sp,0
.endInit:
  dw .endCode - ($+2)
  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS
.endCode:

experimentKefrens4:
  db "Kefrens4$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx+0x1234]
  mov bl,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  mov si,bx
  shl si,1
  shl si,1
  shl si,1
  add si,0x89ab
  xchg ax,bx

  lodsw              ; 1 2
  xchg ax,di         ; 1 0
  mov bl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and cx,ax          ; 2 0
  lodsw              ; 1 2
  or cx,ax           ; 2 0
  xchg ax,cx         ; 1 0
  stosw              ; 2 2 +WS +WS
  mov cl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and cl,al          ; 2 0
  or cl,ah           ; 2 0
  xchg ax,cx         ; 1 0
  stosb              ; 1 1 +WS
.endCode:

experimentKefrens4Sys:
  db "Kefrens4Sys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx+0x1234]
  mov bl,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  mov si,bx
  shl si,1
  shl si,1
  shl si,1
  add si,0x89ab
  xchg ax,bx

  lodsw              ; 1 2
  xchg ax,di         ; 1 0
  mov bl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and cx,ax          ; 2 0
  lodsw              ; 1 2
  or cx,ax           ; 2 0
  xchg ax,cx         ; 1 0
  stosw              ; 2 2 +WS +WS
  mov cl,[es:di]     ; 3 1 +WS
  lodsw              ; 1 2
  and cl,al          ; 2 0
  or cl,ah           ; 2 0
  xchg ax,cx         ; 1 0
  stosb              ; 1 1 +WS
.endCode:

experimentKefrens4P:
  db "Kefrens4P$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov sp,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS
.endCode:

experimentKefrens4PSys:
  db "Kefrens4PSys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,0
  mov word[si],0
.endInit:
  dw .endCode - ($+2)
  inc bx
  xor bh,bh
  mov ax,bx
  mov bl,[bx]
  shl bx,1
  mov sp,[bx+0x4567]  ; mulTable is a different 160-element table per scanline
  xchg ax,bx

  pop di
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and ax,bx          ; 2 0
  pop bx
  or ax,bx           ; 2 0
  stosw              ; 2 2 +WS +WS
  mov al,[es:di]     ; 3 1 +WS
  pop bx
  and al,bl
  or al,bh
  stosb              ; 1 1 +WS
.endCode:


experimentKefrens:
  db "Kefrens$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,0
  mov word[bx],0
.endInit:
  dw .endCode - ($+2)
  mov di,[bx]
  mov al,[es:di]
  and ax,[bx+2]
  or ax,[bx+4]
  stosw
  mov al,[es:di]
  and al,[bx+6]
  or al,[bx+7]
  stosb
.endCode:

experimentKefrensSys:
  db "KefrensSys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov bx,0
  mov word[bx],0
.endInit:
  dw .endCode - ($+2)
  mov di,[bx]
  mov al,[es:di]
  and ax,[bx+2]
  or ax,[bx+4]
  stosw
  mov al,[es:di]
  and al,[bx+6]
  or al,[bx+7]
  stosb
.endCode:

experimentKefrens3:
  db "Kefrens3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,1
.endInit:
  dw .endCode - ($+2)
  lodsw              ; 1 2
  xchg ax,di         ; 1 0
  mov cl,[di]        ; 2 1
  lodsw              ; 1 2
  and cx,ax          ; 2 0
  lodsw              ; 1 2
  or cx,ax           ; 2 0
  xchg ax,cx         ; 1 0
  mov [di],ax        ; 2 2
  stosw              ; 2 2 +WS +WS
  mov cl,[di]        ; 2 1
  lodsw              ; 1 2
  and cl,al          ; 2 0
  or cl,ah           ; 2 0
  xchg ax,cx         ; 1 0
  mov [di],al        ; 2 1
  stosb              ; 1 1 +WS     ; Est = 42/46.5
.endCode:

experimentKefrens3Sys:
  db "Kefrens3Sys$"
  dw .endInit - ($+2)
  mov ax,0x8001
  mov es,ax
  mov ax,0x8000
  mov ds,ax
  mov si,1
.endInit:
  dw .endCode - ($+2)
  lodsw              ; 1 2
  xchg ax,di         ; 1 0
  mov cl,[di]        ; 2 1
  lodsw              ; 1 2
  and cx,ax          ; 2 0
  lodsw              ; 1 2
  or cx,ax           ; 2 0
  xchg ax,cx         ; 1 0
  mov [di],ax        ; 2 2
  stosw              ; 2 2 +WS +WS
  mov cl,[di]        ; 2 1
  lodsw              ; 1 2
  and cl,al          ; 2 0
  or cl,ah           ; 2 0
  xchg ax,cx         ; 1 0
  mov [di],al        ; 2 1
  stosb              ; 1 1 +WS     ; Est = 42/46.5
.endCode:


experimentMoire:
  db "Moire$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ss,ax
.endInit:
  dw .endCode - ($+2)
  pop ax
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
  inc di
.endCode:

experimentMoireX:
  db "MoireX$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ss,ax
.endInit:
  dw .endCode - ($+2)
  pop ax
  xor ax,[bp+12]
  stosb
  mov al,ah
  inc di
  stosb
  inc di
.endCode:

experimentMoire2:
  db "Moire2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ss,ax
.endInit:
  dw .endCode - ($+2)
  pop ax
  inc di
  xor ax,[bp+12]
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireX2:
  db "MoireX2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ss,ax
.endInit:
  dw .endCode - ($+2)
  pop ax
  inc di
  xor ax,[bp+12]
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoire3:
  db "Moire3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ss,ax
.endInit:
  dw .endCode - ($+2)
  pop ax
  xor ax,[bp+12]
  inc di
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireX3:
  db "MoireX3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov ax,0x8000
  mov ss,ax
.endInit:
  dw .endCode - ($+2)
  pop ax
  xor ax,[bp+12]
  inc di
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoire:
  db "Moire$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,[bx+2]
  stosb
  mov al,ah
  inc di
  stosb
  inc di
.endCode:

experimentMoireX:
  db "MoireX$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,[bx+2]
  stosb
  inc di
  mov al,ah
  stosb
  inc di
.endCode:

experimentMoire2:
  db "Moire2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  inc di
  xor ax,[bx+2]
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoire2X:
  db "Moire2X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  inc di
  xor ax,[bx+2]
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoire3:
  db "Moire3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,[bx+2]
  inc di
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoire3X:
  db "Moire3X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,[bx+2]
  inc di
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoire:
  db "Moire$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,9999
  stosb
  mov al,ah
  inc di
  stosb
  inc di
.endCode:

experimentMoireX:
  db "MoireX$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,9999
  stosb
  inc di
  mov al,ah
  stosb
  inc di
.endCode:

experimentMoire2:
  db "Moire2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  inc di
  xor ax,9999
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoire2X:
  db "Moire2X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  inc di
  xor ax,9999
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoire3:
  db "Moire3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,9999
  inc di
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoire3X:
  db "Moire3X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  xor ax,9999
  inc di
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireA:
  db "MoireA$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  pop dx
  xor ax,dx
  stosb
  mov al,ah
  inc di
  stosb
  inc di
.endCode:

experimentMoireAX:
  db "MoireAX$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  pop dx
  xor ax,dx
  stosb
  inc di
  mov al,ah
  stosb
  inc di
.endCode:

experimentMoireA2:
  db "MoireA2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  inc di
  pop dx
  xor ax,dx
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoireA2X:
  db "MoireA2X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  inc di
  pop dx
  xor ax,dx
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireA3:
  db "MoireA3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  pop dx
  inc di
  xor ax,dx
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoireA3X:
  db "MoireA3X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  pop dx
  inc di
  xor ax,dx
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireA4:
  db "MoireA4$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  pop dx
  xor ax,dx
  inc di
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoireA4X:
  db "MoireA4X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  lodsw
  pop dx
  xor ax,dx
  inc di
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireB:
  db "MoireB$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  lodsw
  xor ax,dx
  stosb
  mov al,ah
  inc di
  stosb
  inc di
.endCode:

experimentMoireBX:
  db "MoireBX$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  lodsw
  xor ax,dx
  stosb
  inc di
  mov al,ah
  stosb
  inc di
.endCode:

experimentMoireB2:
  db "MoireB2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  inc di
  lodsw
  xor ax,dx
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoireB2X:
  db "MoireB2X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  inc di
  lodsw
  xor ax,dx
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireB3:
  db "MoireB3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  lodsw
  inc di
  xor ax,dx
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoireB3X:
  db "MoireB3X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  lodsw
  inc di
  xor ax,dx
  stosb
  inc di
  mov al,ah
  stosb
.endCode:

experimentMoireB4:
  db "MoireB4$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  lodsw
  xor ax,dx
  inc di
  stosb
  mov al,ah
  inc di
  stosb
.endCode:

experimentMoireB4X:
  db "MoireB4X$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov si,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  pop dx
  lodsw
  xor ax,dx
  inc di
  stosb
  inc di
  mov al,ah
  stosb
.endCode:


;experimentCRTC:
;  db "CRTC$"
;  dw .endInit - ($+2)
;  mov dx,0x3d4
;.endInit:
;  dw .endCode - ($+2)
;  mov ax,((114 - 1) << 8) | 0x00       ;Horizontal total
;  out dx,ax
;  mov ax,(23 << 8) | 0x01              ;Horizontal displayed
;  out dx,ax
;  mov ax,(90 << 8) | 0x02              ;Horizontal sync position
;  out dx,ax
;.endCode:
;
;experimentLine:
;  db "Line$"
;  dw .endInit - ($+2)
;  mov dx,0x3d4
;.endInit:
;  dw .endCode - ($+2)
;  mov ax,((114 - 1) << 8) | 0x00       ;Horizontal total
;  out dx,ax
;  mov ax,(23 << 8) | 0x01              ;Horizontal displayed
;  out dx,ax
;  mov ax,(90 << 8) | 0x02              ;Horizontal sync position
;  out dx,ax
;
;  times 17 nop
;
;  mov ax,((114 - 1) << 8) | 0x00       ;Horizontal total
;  out dx,ax
;  mov ax,(23 << 8) | 0x01              ;Horizontal displayed
;  out dx,ax
;  mov ax,(90 << 8) | 0x02              ;Horizontal sync position
;  out dx,ax
;
;  times 17 nop
;.endCode:
;
;experimentLine2:
;  db "Line2$"
;  dw .endInit - ($+2)
;  mov dx,0x3d4
;.endInit:
;  dw .endCode - ($+2)
;
;  mov dl,0xd9
;  mov al,9
;  out dx,al
;  mov al,6
;  out dx,al
;
;  times 26 nop
;
;  mov al,0x0a
;  out dx,al
;  mov al,6
;  out dx,al
;  mov dl,0xd4
;
;  times 27 nop
;.endCode:
;
;
;experimentBlock:
;  db "Block$"
;  dw .endInit - ($+2)
;  mov dx,0x3d9
;.endInit:
;  dw .endCode - ($+2)
;  mov al,8
;  out dx,al
;  mov al,ah
;  out dx,al
;.endCode:
;
;experimentBlock2:
;  db "Block2$"
;  dw .endInit - ($+2)
;  mov dx,0x3d9
;.endInit:
;  dw .endCode - ($+2)
;  inc ax
;  out dx,al
;.endCode:
;
;experimentMOVSBstring:
;  db "MOVSB string$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov ax,0xb800
;  mov es,ax
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  movsb
;.endCode:
;
;experimentMOVSWstring:
;  db "MOVSW string$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov ax,0xb800
;  mov es,ax
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  movsw
;.endCode:
;
;experimentLODSBSTOSBstring:
;  db "LODSB STOSB string$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov ax,0xb800
;  mov es,ax
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  lodsb
;  stosb
;.endCode:
;
;experimentLODSWSTOSWstring:
;  db "LODSW STOSW string$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov ax,0xb800
;  mov es,ax
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  lodsw
;  stosw
;.endCode:
;
;experimentPaletteRegister:
;  db "palette change$"
;  dw .endInit - ($+2)
;  mov dx,0x3d9
;.endInit:
;  dw .endCode - ($+2)
;  mov al,99
;  out dx,al
;.endCode:
;
;experimentJJ:
;  db "pearce_jj$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov es,ax
;  mov dx,0x3d8
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  in ax,dx
;  stosw
;.endCode:
;
;experimentJK:
;  db "Jordan Knight$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov es,ax
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  lodsw
;  mov bx,ax
;  mov ax,[es:di]
;  and al,bh
;  or al,bl
;  stosw
;.endCode:
;
;experimentJL:
;  db "Jim Leonard$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov es,ax
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  mov dx,[bx+3]
;  lodsw
;  and al,ah
;  or al,dl
;  stosw
;.endCode:
;
;experimentAJ:
;  db "Andrew Jenner$"
;  dw .endInit - ($+2)
;  mov ax,0x9000
;  mov ds,ax
;  mov es,ax
;  mov si,0
;  mov di,0
;.endInit:
;  dw .endCode - ($+2)
;  mov ax,[bx+3]
;  and al,[di]
;  or al,ah
;  stosb
;  inc di
;.endCode:
;
;
;experiment1:
;  db "retrace loop$"
;  dw .endInit - ($+2)
;  mov dx,0x3d9
;.endInit:
;  dw .endCode - ($+2)
;  in al,dx
;  test al,1
;  jz .endCode
;.endCode
;
;experiment2:
;  db "retrace found$"
;  dw .endInit - ($+2)
;  mov dx,0x3d9
;.endInit:
;  dw .endCode - ($+2)
;  in al,dx
;  test al,1
;  jnz .endCode
;.endCode
;
;%macro setNextStartAddress 0       ;    23
;    mov bl,ch                      ; 2 0 2
;    mov bh,0x34                    ; 2 0 2
;    mov ah,[bx]                    ; 2 1 3
;    mov al,0x0d                    ; 2 0 2
;    out dx,ax                      ; 1 2 3
;    mov ah,[bx+0x100]              ; 4 1 5
;    dec ax                         ; 1 0 1
;    out dx,ax                      ; 1 2 3
;    add cx,si                      ; 2 0 2
;%endMacro
;
;experiment3:
;  db "scanline 0$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  mov ax,0x1902 ; 2: Horizontal sync position: 25       ; 3 0 3  11
;  out dx,ax                                             ; 1 2 3  14
;  mov ax,0x0104 ; 4: Vertical total: 2 rows/frame       ; 3 0 3  17
;  out dx,ax                                             ; 1 2 3  20
;  times 7 nop                                           ; 1 0 1  27
;
;  ; Set length of second part of scanline
;  mov ax,0x2400 ; 0: Horizontal total: 37 characters    ; 3 0 3  30   = length of second half-line, total 57 characters
;  out dx,ax                                             ; 1 2 3  33
;
;  setNextStartAddress                                   ;    23  56   Display will be disabled at around IO 53
;
;  ; Might want to put this back in for compatibility with faster machines - see if it makes it too slow on the XT
;  mov dl,0xda                                           ; 2 0 2  58
;.endCode
;
;experiment3a:
;  db "scanline 0a$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  mov ax,0x1902 ; 2: Horizontal sync position: 25       ; 3 0 3  11
;  out dx,ax                                             ; 1 2 3  14
;  mov ax,0x0104 ; 4: Vertical total: 2 rows/frame       ; 3 0 3  17
;  out dx,ax                                             ; 1 2 3  20
;  times 7 nop                                           ; 1 0 1  27
;.endCode
;
;experiment4:
;  db "scanlines 1-198$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  times 19 nop                                          ; 1 0 1  27
;
;  ; Set length of second part of scanline
;  mov ax,0x2400 ; 0: Horizontal total: 37 characters    ; 3 0 3  30   = length of second half-line, total 57 characters
;  out dx,ax                                             ; 1 2 3  33
;
;  setNextStartAddress                                   ;    23  56   Display will be disabled at around IO 53
;
;  ; Might want to put this back in for compatibility with faster machines - see if it makes it too slow on the XT
;  mov dl,0xda                                           ; 2 0 2  58
;.endCode
;
;experiment4a:
;  db "scanlines 1-198a$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  times 19 nop                                          ; 1 0 1  27
;.endCode
;
;experiment5:
;  db "scanline 199$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  mov ax,0x3f04 ; 4: Vertical total: 64 rows/frame      ; 3 0 3  11
;  out dx,ax                                             ; 1 2 3  14
;  mov cx,bp     ; Initial offset in lines/256           ; 2 0 2  16
;  times 11 nop                                          ; 1 0 1  27
;
;  ; Set length of second part of scanline
;  mov ax,0x2400 ; 0: Horizontal total: 37 characters    ; 3 0 3  30   = length of second half-line, total 57 characters
;  out dx,ax                                             ; 1 2 3  33
;
;  setNextStartAddress                                   ;    23  56   Display will be disabled at around IO 53
;
;  ; Might want to put this back in for compatibility with faster machines - see if it makes it too slow on the XT
;  mov dl,0xda                                           ; 2 0 2  58
;.endCode
;
;experiment5a:
;  db "scanline 199a$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  mov ax,0x3f04 ; 4: Vertical total: 64 rows/frame      ; 3 0 3  11
;  out dx,ax                                             ; 1 2 3  14
;  mov cx,bp     ; Initial offset in lines/256           ; 2 0 2  16
;  times 11 nop                                          ; 1 0 1  27
;.endCode
;
;experiment6:
;  db "scanline 199-200$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  mov ax,0x3f04 ; 4: Vertical total: 64 rows/frame      ; 3 0 3  11
;  out dx,ax                                             ; 1 2 3  14
;  mov cx,bp     ; Initial offset in lines/256           ; 2 0 2  16
;  times 11 nop                                          ; 1 0 1  27
;
;  ; Set length of second part of scanline
;  mov ax,0x2400 ; 0: Horizontal total: 37 characters    ; 3 0 3  30   = length of second half-line, total 57 characters
;  out dx,ax                                             ; 1 2 3  33
;
;  setNextStartAddress                                   ;    23  56   Display will be disabled at around IO 53
;
;  ; Might want to put this back in for compatibility with faster machines - see if it makes it too slow on the XT
;  mov dl,0xda                                           ; 2 0 2  58
;  ; waitForDisplayDisable
;
;
;  ; During line 200 we:
;  ;   change the horizontal total to 0x38
;  ;   change the horizontal sync position to 0x2d
;  ; Can't use waitForDisplayEnable here because it won't activate again until line 0
;  times 18 nop
;  mov dl,0xd4
;  mov ax,0x3800 ; 0: Horizontal total: 57 characters
;  out dx,ax
;  mov ax,0x2d02 ; 2: Horizontal sync position: 45
;  out dx,ax
;
;.endCode
;
;experiment6a:
;  db "scanline 199-200$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  mov dl,0xd4                                           ; 2 0 2   2
;  mov ax,0x1300 ; 0: Horizontal total: 20 characters    ; 3 0 3   5   = length of first half-line
;  out dx,ax                                             ; 1 2 3   8
;  mov ax,0x3f04 ; 4: Vertical total: 64 rows/frame      ; 3 0 3  11
;  out dx,ax                                             ; 1 2 3  14
;  mov cx,bp     ; Initial offset in lines/256           ; 2 0 2  16
;  times 11 nop                                          ; 1 0 1  27
;
;  ; Set length of second part of scanline
;  mov ax,0x2400 ; 0: Horizontal total: 37 characters    ; 3 0 3  30   = length of second half-line, total 57 characters
;  out dx,ax                                             ; 1 2 3  33
;
;  setNextStartAddress                                   ;    23  56   Display will be disabled at around IO 53
;
;  ; Might want to put this back in for compatibility with faster machines - see if it makes it too slow on the XT
;  mov dl,0xda                                           ; 2 0 2  58
;  ; waitForDisplayDisable
;
;
;  ; During line 200 we:
;  ;   change the horizontal total to 0x38
;  ;   change the horizontal sync position to 0x2d
;  ; Can't use waitForDisplayEnable here because it won't activate again until line 0
;  times 18 nop
;
;.endCode



;experiment1:
;  db "load to bh 1$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  lodsb
;  mov bh,al
;.endCode


;experiment2:
;  db "load to bh 2$"
;  dw .endInit - ($+2)
;.endInit:
;  dw .endCode - ($+2)
;  mov bh,[si]
;  inc si
;.endCode



;experiment1:
;  db "rep lodsb$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep lodsb
;.endCode
;
;experiment2:
;  db "rep lodsw$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep lodsw
;.endCode
;
;experiment3:
;  db "rep stosb$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep stosb
;.endCode
;
;experiment4:
;  db "rep stosw$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep stosw
;.endCode
;
;experiment5:
;  db "rep movsb$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsb
;.endCode
;
;experiment6:
;  db "rep movsw$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsw
;.endCode
;
;experiment7:
;  db "rep cmpsb$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsb
;.endCode
;
;experiment8:
;  db "rep cmpsw$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsw
;.endCode
;
;experiment9:
;  db "rep scasb$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;  mov ax,0x7f7f
;.endInit:
;  dw .endCode - ($+2)
;  rep scasb
;.endCode
;
;experiment10:
;  db "rep scasw$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;  mov ax,0x7f7f
;.endInit:
;  dw .endCode - ($+2)
;  rep scasw
;.endCode
;
;experiment11:
;  db "rep lodsb CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep lodsb
;.endCode
;
;experiment12:
;  db "rep lodsw CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep lodsw
;.endCode
;
;experiment13:
;  db "rep stosb CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep stosb
;.endCode
;
;experiment14:
;  db "rep stosw CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep stosw
;.endCode
;
;experiment15:
;  db "rep movsb CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsb
;.endCode
;
;experiment16:
;  db "rep movsw CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsw
;.endCode
;
;experiment17:
;  db "rep cmpsb CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsb
;.endCode
;
;experiment18:
;  db "rep cmpsw CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsw
;.endCode
;
;experiment19:
;  db "rep scasb CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;  mov ax,0x7f7f
;.endInit:
;  dw .endCode - ($+2)
;  rep scasb
;.endCode
;
;experiment20:
;  db "rep scasw CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;  mov ax,0x7f7f
;.endInit:
;  dw .endCode - ($+2)
;  rep scasw
;.endCode
;
;experiment21:
;  db "rep movsb RAM->CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ax,0x8000
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsb
;.endCode
;
;experiment22:
;  db "rep movsw RAM->CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ax,0x8000
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsw
;.endCode
;
;experiment23:
;  db "rep movsb CGA->RAM$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ax,0xb800
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsb
;.endCode
;
;experiment24:
;  db "rep movsw CGA->RAM$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ax,0xb800
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep movsw
;.endCode
;
;experiment25:
;  db "rep cmpsb RAM->CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ax,0x8000
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsb
;.endCode
;
;experiment26:
;  db "rep cmpsw RAM->CGA$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0xb800
;  mov es,ax
;  mov ax,0x8000
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsw
;.endCode
;
;experiment27:
;  db "rep cmpsb CGA->RAM$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ax,0xb800
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsb
;.endCode
;
;experiment28:
;  db "rep cmpsw CGA->RAM$"
;  dw .endInit - ($+2)
;  mov cx,2048
;  mov ax,0x8000
;  mov es,ax
;  mov ax,0xb800
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  rep cmpsw
;.endCode




experimentlodsbSys:
  db "lodsbSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov ds,ax
.endInit:
  dw .endCode - ($+2)
  lodsb
.endCode:

experimentlodswSys:
  db "lodswSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov ds,ax
.endInit:
  dw .endCode - ($+2)
  lodsw
.endCode:

experimentlodsbCGA:
  db "lodsbCGA$"
  db 18
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
.endInit:
  dw .endCode - ($+2)
  lodsb
.endCode:

experimentlodswCGA:
  db "lodswCGA$"
  db 18
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
.endInit:
  dw .endCode - ($+2)
  lodsw
.endCode:


experimentstosbSys:
  db "stosbSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  stosb
.endCode:

experimentstoswSys:
  db "stoswSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  stosw
.endCode:

experimentstosbCGA:
  db "stosbCGA$"
  db 18
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  stosb
.endCode:

experimentstoswCGA:
  db "stoswCGA$"
  db 18
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  stosw
.endCode:


;experimentmovsbSysSys:
;  db "movsbSysSys$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsb
;.endCode:
;
;experimentmovswSysSys:
;  db "movswSysSys$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0x8000
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsw
;.endCode:
;
;experimentmovsbSysCGA:
;  db "movsbSysCGA$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0xb800
;  mov es,ax
;  mov ax,0x8000
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsb
;.endCode:
;
;experimentmovswSysCGA:
;  db "movswSysCGA$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0xb800
;  mov es,ax
;  mov ax,0x8000
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsw
;.endCode:
;
;experimentmovsbCGASys:
;  db "movsbCGASys$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0x8000
;  mov es,ax
;  mov ax,0xb800
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsb
;.endCode:
;
;experimentmovswCGASys:
;  db "movswCGASys$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0x8000
;  mov es,ax
;  mov ax,0xb800
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsw
;.endCode:
;
;experimentmovsbCGACGA:
;  db "movsbCGACGA$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsb
;.endCode:
;
;experimentmovswCGACGA:
;  db "movswCGACGA$"
;  db 18
;  dw .endInit - ($+2)
;  mov ax,0xb800
;  mov es,ax
;  mov ds,ax
;.endInit:
;  dw .endCode - ($+2)
;  movsw
;.endCode:



experimentPopAX:
  db "popax$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  pop ax
.endCode:

experimentPopCX:
  db "popcx$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  pop cx
.endCode:

experimentMovAXiw:
  db "movaxiw$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  mov ax,0x1234
.endCode:

experimentMovCXiw:
  db "movcxiw$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  mov cx,0x1234
.endCode:

experimentMovALib:
  db "movclib$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  mov al,0x12
.endCode:

experimentMovCLib:
  db "movclib$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  mov cl,0x12
.endCode:

experimentLodsw:
  db "lodsw$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov ds,ax
.endInit:
  dw .endCode - ($+2)
  lodsw
.endCode:

experimentLodsb:
  db "lodsb$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov ds,ax
.endInit:
  dw .endCode - ($+2)
  lodsb
.endCode:



experimentRmovsbSysSys:
  db "rmovsbSysSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  rep movsb
.endInit:
  dw .endCode - ($+2)
.endCode:

experimentRmovswSysSys:
  db "rmovswSysSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  rep movsw
.endInit:
  dw .endCode - ($+2)
.endCode:

experimentRmovsbESSysSys:
  db "rmovsbESSysSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  rep es movsb
.endInit:
  dw .endCode - ($+2)
.endCode:

experimentRmovswESSysSys:
  db "rmovswESSysSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  rep es movsw
.endInit:
  dw .endCode - ($+2)
.endCode:

experimentESRmovsbSysSys:
  db "ESrmovsbSysSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  es rep movsb
.endInit:
  dw .endCode - ($+2)
.endCode:

experimentESRmovswESSysSys:
  db "ESrmovswSysSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  es rep movsw
.endInit:
  dw .endCode - ($+2)
.endCode:


experimentRmovsbSysSys:
  db "rmovsbSysSys$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov ds,ax
  rep movsb
.endInit:
  dw .endCode - ($+2)
  mov ax,[si+1234]
  stosw
.endCode:


experimentVoxels1:
  db "voxels 1$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)

mov bh,[0x1234 + bp]
mov dh,[bx + 0x1b]
cmp dh,ah
jg .foo
  mov dl,[0x1235 + bp]
  xor al,dl
  mov [0x12],al
  xchg ax,dx
.foo:
.endCode:

experimentVoxels2:
  db "voxels 2$"
  db 18
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)

mov bh,[0x1234 + bp]
mov dh,[bx + 0x1b]
cmp dh,ah
jng .foo
  mov dl,[0x1235 + bp]
  xor al,dl
  mov [0x12],al
  xchg ax,dx
.foo:
.endCode:

experimentVoxelsWrite3:
  db "voxels w3$"
  db 18
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bx,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  xor al,[si]
  inc si
  stosb
  add di,bx
.endCode:

experimentVoxelsWrite4:
  db "voxels w4$"
  db 18
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bx,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  xor ax,[si]
  inc si
  inc si
  stosb
  inc di
  xchg al,ah
  stosb
  add di,bx
.endCode:

experimentVoxelsWrite5:
  db "voxels w5$"
  db 18
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  mov bx,0
  mov di,0
.endInit:
  dw .endCode - ($+2)
  xor ax,[si]
  xor bx,[si+2]
  xor cx,[si+4]
  xor dx,[si+6]
  add si,bp
  stosb
  inc di
  xchg al,ah
  stosb
  inc di
  xchg ax,bx
  stosb
  inc di
  xchg al,ah
  stosb
  inc di
  xchg ax,cx
  stosb
  inc di
  xchg al,ah
  stosb
  inc di
  xchg ax,dx
  stosb
  inc di
  xchg al,ah
  stosb
  add di,bx
.endCode:





experimentVoxelsWrite6:
  db "voxels w6$"
  db 19
  dw .endInit - ($+2)
  mov bp,0
  mov di,0
  mov si,0
  mov ax,0xb800
  mov ds,ax
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  pop bp
  xor ax,bp
  stosb
  mov [di+4],ah
  pop bp
  xor bx,bp
  xchg ax,bx
  stosb
  mov [di+4],ah
  pop bp
  xor cx,bp
  xchg ax,cx
  stosb
  mov [di+4],ah
  pop bp
  xor dx,bp
  xchg ax,dx
  stosb
  mov [di+4],ah
  add di,si
.endCode:

experimentRepStosw:
  db "rep stosw$"
  db 19
  dw .endInit - ($+2)
  mov di,0
  mov ax,0x8000
  mov es,ax
  cld
  rep stosw
.endInit:
  dw .endCode - ($+2)
.endCode:



experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov di,0
  mov si,0
  mov cx,0
.endInit:
  dw .endCode - ($+2)

mov bx,[0x1234 + bp]
xchg al,bl
mov si,[bx + 0x1b]
  cmp si,di
  jng .done
  stosb
  add di,cx
  cmp si,di
  jng .done
.done:
xchg ax,bx

.endCode:

experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov di,0
  mov si,0
  mov cx,0
.endInit:
  dw .endCode - ($+2)

mov bx,[0x1234 + bp]
xchg al,bl
mov si,[bx + 0x1b]
  cmp si,di
  jg .done
  stosb
  add di,cx
  cmp si,di
  jng .done
.done:
xchg ax,bx

.endCode:

experimentVoxelsD2:
  db "voxels d2$"
  db 18
  dw .endInit - ($+2)
  mov di,0
  mov si,0
  mov cx,0
.endInit:
  dw .endCode - ($+2)

mov bx,[0x1234 + bp]
xchg al,bl
mov si,[bx + 0x1b]
  cmp si,di
  jg .done
  stosb
  add di,cx
  cmp si,di
  jg .done
  stosb
  add di,cx
  cmp si,di
  jng .done
.done:
xchg ax,bx

.endCode:

experimentVoxelsD3:
  db "voxels d3$"
  db 18
  dw .endInit - ($+2)
  mov di,0
  mov si,0
  mov cx,0
.endInit:
  dw .endCode - ($+2)

mov bx,[0x1234 + bp]
xchg al,bl
mov si,[bx + 0x1b]
  cmp si,di
  jg .done
  stosb
  add di,cx
  cmp si,di
  jg .done
  stosb
  add di,cx
  cmp si,di
  jg .done
  stosb
  add di,cx
  cmp si,di
  jng .done
.done:
xchg ax,bx

.endCode:



experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov sp,.func
  mov di,0
  mov bp,0
  mov cx,0
  mov bx,[0x1234 + bp]
  xchg al,bl
  mov dx,[bx + 0x1b]
  jmp .endInit
.func:
  stosb
  add si,sp    ; di,sp
  stosb
  add si,sp    ; di,sp
  stosb
  add si,sp    ; di,sp
  ret
.endInit:
  dw .endCode - ($+2)

mov bx,[0x1234 + bp]                     ; 19 bytes = 152kB (8kB per byte)
xchg al,bl
mov si,[bx + 0x1b]
xchg dx,si
sub si,dx
call sp ;cx
xchg ax,bx

.endCode:





experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],3
.endInit:
  dw .endCode - ($+2)

mov cx,[0x1234 + bp]  ; 4
xchg al,bl            ; 2
mov dh,[bx + 0x1b]    ; 3     ; old in dx, new in cx
xchg dl,dh            ; 2     ; new in dx, old in cx
sub dh,dl             ; 2
jbe .occluded         ; 2
rep stosb             ; 2
.occluded:
xchg ax,bx            ; 1   18 bytes = 128kB

.endCode:


experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],3
.endInit:
  dw .endCode - ($+2)

mov cx,[0x1234 + bp]  ; 4
xchg al,bl            ; 2
mov dh,[bx + 0x1b]    ; 3     ; old in dx, new in cx
xchg dl,dh            ; 2     ; new in dx, old in cx
sub dh,dl             ; 2
ja .occluded         ; 2
rep stosb             ; 2
.occluded:
xchg ax,bx            ; 1   18 bytes = 128kB

.endCode:


experimentVoxelsDb:
  db "voxels db$"
  db 18
  dw .endInit - ($+2)
  mov di,0
  mov cx,0
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  movsb
  add di,cx

.endCode:





experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],3
.endInit:
  dw .endCode - ($+2)

mov cx,[0x1234 + bp]  ; 4
mov dh,[bx + 0x1b]    ; 3     ; old in dx, new in cx
xchg dl,dh            ; 2     ; new in dx, old in cx
sub dh,dl             ; 2
jbe .occluded         ; 2
mov ax,[0x1236 + bp]  ; 4
rep stosw             ; 2  19 bytes
.occluded:

.endCode:


experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],1
.endInit:
  dw .endCode - ($+2)

mov cx,[0x1234 + bp]  ; 4
mov dh,[bx + 0x1b]    ; 3     ; old in dx, new in cx
xchg dl,dh            ; 2     ; new in dx, old in cx
sub dh,dl             ; 2
ja .occluded         ; 2
mov ax,[0x1236 + bp]  ; 4
rep stosw             ; 2  19 bytes
.occluded:

.endCode:


experimentVoxelsDb:
  db "voxels db$"
  db 18
  dw .endInit - ($+2)
  mov di,0
  mov cx,0
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  lodsw
  mov [es:di + bx],ah
  stosb
  add di,cx

.endCode:





experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov cx,0
  mov word[0x1234 + bp],3
.endInit:
  dw .endCode - ($+2)

mov si,0x1234
mov cl,[si + bp]  ; 4
mov dh,[bx + 0x1b]    ; 3     ; old in dx, new in cx
xchg dl,dh            ; 2     ; new in dx, old in cx
sub dh,dl             ; 2
jbe .occluded         ; 2
mov al,[si + bp + 1]
rep stosb             ; 2
.occluded:

.endCode:


experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],2
.endInit:
  dw .endCode - ($+2)

mov si,0x1234
mov cl,[si + bp]  ; 4
mov dh,[bx + 0x1b]    ; 3     ; old in dx, new in cx
xchg dl,dh            ; 2     ; new in dx, old in cx
sub dh,dl             ; 2
ja .occluded         ; 2
mov al,[si + bp + 1]
rep stosb             ; 2
.occluded:

.endCode:


experimentVoxelsDb:
  db "voxels db$"
  db 18
  dw .endInit - ($+2)
  mov di,0
  mov cx,0
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

  movsb
  inc si
  add di,cx
  movsb
  inc si
  add di,cx

.endCode:




experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov cx,0
  mov word[0x1234 + bp],3
.endInit:
  dw .endCode - ($+2)

lea sp,[bp+0x1234]
pop cx
mov dh,[bx + 0x1b]
xchg dl,dh
sub dh,dl
jbe .occluded
pop ax
rep stosb
.occluded:

.endCode:


experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],1
.endInit:
  dw .endCode - ($+2)

lea sp,[bp+0x1234]
pop cx
mov dh,[bx + 0x1b]
xchg dl,dh
sub dh,dl
ja .occluded
pop ax
rep stosb
.occluded:



experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov cx,0
  mov word[0x1234 + bp],3
.endInit:
  dw .endCode - ($+2)

lds cx,[0x1234 + bp]
mov dh,[si + 0x1b]
xchg dl,dh
sub dh,dl
jbe .occluded
rep stosb
.occluded:

.endCode:


experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],1
.endInit:
  dw .endCode - ($+2)

lds cx,[0x1234 + bp]
mov dh,[si + 0x1b]
xchg dl,dh
sub dh,dl
ja .occluded
rep stosb
.occluded:


experimentVoxels1:
  db "voxels 1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov word[0x1234 + bp],0
  mov word[0x1236 + bp],ds
  xor di,di
  mov [si+0x1b],di
.endInit:
  dw .endCode - ($+2)

lds dx,[0x1234 + bp]
cmp [si+0x1b],di
jg .occluded
  mov di,[si+0x1b]
  xor al,dl
  stosb
  xchg ax,dx
.occluded:
.endCode:

experimentVoxels2:
  db "voxels 2$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov word[0x1234 + bp],0
  mov word[0x1236 + bp],ds
  xor di,di
  mov [si+0x1b],di
.endInit:
  dw .endCode - ($+2)

lds dx,[0x1234 + bp]
cmp [si+0x1b],di
jng .occluded
  mov di,[si+0x1b]
  xor al,dl
  stosb
  xchg ax,dx
.occluded:
.endCode:



experimentVoxels1:
  db "voxels 1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  xor di,di
  mov bh,[0x1234 + bp]
  mov [bx + 0x1b],di
.endInit:
  dw .endCode - ($+2)

mov bh,[0x1234 + bp]
cmp [bx + 0x1b],di
jg .occluded
  mov di,[bx+0x1b]
  mov dl,[0x1235 + bp]
  xor al,dl
  stosb
  xchg ax,dx
.occluded:
.endCode:

experimentVoxels2:
  db "voxels 2$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  xor di,di
  mov bh,[0x1234 + bp]
  mov [bx + 0x1b],di
.endInit:
  dw .endCode - ($+2)

mov bh,[0x1234 + bp]
cmp [bx + 0x1b],di
jng .occluded
  mov di,[bx+0x1b]
  mov dl,[0x1235 + bp]
  xor al,dl
  stosb
  xchg ax,dx
.occluded:
.endCode:



experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov cx,0
  mov word[0x1234 + bp],3
.endInit:
  dw .endCode - ($+2)

lds cx,[0x1234 + bp]
mov dh,[si + 0x1b]
xchg dl,dh
sub dh,dl
jbe .occluded
rep movsb
.occluded:

.endCode:


experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],1
.endInit:
  dw .endCode - ($+2)

lds cx,[0x1234 + bp]
mov dh,[si + 0x1b]
xchg dl,dh
sub dh,dl
ja .occluded
rep movsb
.occluded:





experimentVoxelsD0:
  db "voxels d0$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov cx,0
  mov word[0x1234 + bp],3
  mov word[0x1236 + bp],ds
.endInit:
  dw .endCode - ($+2)

lds cx,[0x1234 + bp]
mov dh,[si + 0x1b]
xchg ax,dx
sub dh,dl
jbe .occluded
rep movsb
.occluded:

.endCode:


experimentVoxelsD1:
  db "voxels d1$"
  db 18
  dw .endInit - ($+2)
  mov ax,0x8000
  mov es,ax
  mov bp,0
  mov ax,0
  mov word[0x1234 + bp],1
  mov word[0x1236 + bp],ds
.endInit:
  dw .endCode - ($+2)

lds cx,[0x1234 + bp]
mov dh,[si + 0x1b]
xchg ax,dx
sub dh,dl
ja .occluded
rep movsb
.occluded:

.endCode:



experimentUnpackShift:
  db "UnpackShift$"
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  mov cl,4    ;ax = ???????? -xxx-yyy
  cbw         ;ax = -------- -xxx-yyy
  shl ax,cl   ;ax = -----xxx -yyy0000
  sar al,cl   ;ax = -----xxx -----yyy
.endCode:

experimentUnpackTable:
  db "UnpackTable$"
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  xor bx,bx
  mov bl,al
  shl bx,1
  mov ax,word[cs:bx+0x1234]
.endCode:

experimentUnpackTable2:
  db "UnpackTable$"
  dw .endInit - ($+2)
.endInit:
  dw .endCode - ($+2)
  xchg ax,bx
  mov bl,0
  add bx,bx
  mov ax,word[cs:bx+0x1234]
.endCode:


experimentROLCL:
  db "ROLCL$"
  dw .endInit - ($+2)

  mov ax,0x7000
  mov ds,ax
  xor si,si
  xor bx,bx
  cld

.endInit:
  dw .endCode - ($+2)

  lodsw
  mov cl, 4
  rol ax, cl
  mov [bx], ax
.endCode:

experimentROLx4:
  db "ROLx4$"
  dw .endInit - ($+2)

  mov ax,0x7000
  mov ds,ax
  xor si,si
  xor bx,bx
  cld

.endInit:
  dw .endCode - ($+2)

  lodsw
  rol ax, 1
  rol ax, 1
  rol ax, 1
  rol ax, 1
  mov [bx], ax
.endCode:


experimentSendbit:
  db "Sendbit$"
  dw .endInit - ($+2)

  mov dx,0xe0

.endInit:
  dw .endCode - ($+2)

  rcr bl,1             ; 2 0 8
  mov al,bh            ; 2 0 8
  rcr al,1             ; 2 0 8
  rcr al,1             ; 2 0 8
  out dx,al            ; 1 1 8
.endCode:


experimentPlaywave:
  db "Playwave$"
  dw .endInit - ($+2)

  mov dx,0xe0
  mov ax,0x8000
  mov ds,ax
  mov bx,0xf
  xor si,si
  xor di,di
  mov ah,0
  mov cx,0

.endInit:
  dw .endCode - ($+2)

  lodsb
  out dx,al
  mov al,[es:si]
  add di,ax
  and si,bx
  mov ds,di
  cmp di,cx
  jne $+2
.endCode:



%assign nops -1
%rep 18
%assign nops nops+1

experimentSIDPatch %+ nops:
  db "SIDPatch$"
  dw .endInit - ($+2)

  mov ax,0x8000
  mov ds,ax
  mov ss,ax
  mov cx,1
  mov ah,1
  times nops nop

.endInit:
  dw .endCode - ($+2)

  add bp,0x0f0f
  mov bx,bp
  mov bl,0x0f
  mov al,[bx]
  add si,0x0f0f
  mov bx,si
  mov bl,0x0f
  add al,[bx]
  add di,0x0f0f
  mov bx,di
  mov bl,0x0f
  add al,[bx]
  add dx,0x0f0f
  mov bx,dx
  mov bl,0x0f
  add al,[bx]
  out 0xe0,al
  loop .endInit+2

  pop bx
  pop word[cs:bx]
  mov cl,1

  jmp $+2

.endCode


;experimentSID_CS_INC_mw %+ nops:
;  db "SID_CS_INC_mw$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  inc word[cs:0]
;  times 3 nop
;
;.endCode
;
;
;experimentSID_CS_MOV_ES_mw %+ nops:
;  db "SID_CS_MOV_ES_mw$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov es,[cs:0]
;  times 6 nop
;
;.endCode
;
;
;experimentSID_mem_mem_byte %+ nops:
;  db "SID_mem_mem_byte$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov es,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov al,[es:0]
;  mov [ss:0],al
;  times 3 nop
;
;.endCode
;
;
;experimentSID_mem_mem_word %+ nops:
;  db "SID_mem_mem_word$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov es,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov ax,[es:0]
;  mov [ss:0],ax
;  times 1 nop
;
;.endCode
;
;
;experimentSID_ES_MOV_SP_mw %+ nops:
;  db "SID_ES_MOV_SP_mw$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov es,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov sp,[es:0]
;  times 6 nop
;
;.endCode
;
;
;experimentSID_CRTC %+ nops:
;  db "SID_CRTC$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov bx,dx
;  mov dx,0x3d4
;  mov ax,0x000c
;  out dx,ax
;  mov dx,bx
;;  times 4 nop
;
;.endCode
;
;
;experimentSID_MOV_SP_iw %+ nops:
;  db "SID_MOV_SP_iw$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov sp,1234
;  times 12 nop
;
;.endCode
;
;
;experimentSID_load_ES %+ nops:
;  db "SID_load_ES$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov cx,0xffff
;  mov ah,1
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov ax,0xb800
;  mov es,ax
;  times 10 nop
;
;.endCode
;
;
;experimentSID_draw %+ nops:
;  db "SID_draw$"
;  dw .endInit - ($+2)
;
;  mov ax,0x8000
;  mov ds,ax
;  mov ss,ax
;  mov cx,0xffff
;  mov ah,1
;  mov ax,0xb800
;  mov es,ax
;  times nops nop
;
;.endInit:
;  dw .endCode - ($+2)
;
;  add bp,0x0f0f
;  mov bx,bp
;  mov bl,0x0f
;  mov al,[bx]
;  add si,0x0f0f
;  mov bx,si
;  mov bl,0x0f
;  add al,[bx]
;  add di,0x0f0f
;  mov bx,di
;  mov bl,0x0f
;  add al,[bx]
;  add dx,0x0f0f
;  mov bx,dx
;  mov bl,0x0f
;  add al,[bx]
;  out 0xe0,al
;  loop $+2
;
;  mov word[es:0x3ffe],1234
;  times 1 nop
;
;.endCode

%endrep

experimentHLT:
  db "HLT$"
  dw .endInit - ($+2)

.endInit:
  dw .endCode - ($+2)

  hlt

.endCode



experimentVScroll:
  db "VScroll$"
  dw .endInit - ($+2)
  mov di,8192
  rep movsw
.endInit:
  dw .endCode - ($+2)
.endCode:

experimentHScroll2:
  db "HScroll$"
  dw .endInit - ($+2)
  mov di,8192
.endInit:
  dw .endCode - ($+2)
  movsw
  add di,bx
  add si,bx
.endCode:

experimentHScroll1:
  db "HScroll1$"
  dw .endInit - ($+2)
  mov di,8192
.endInit:
  dw .endCode - ($+2)
  movsw
  add di,bx
.endCode:

experimentHScroll0:
  db "HScroll0$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov ds,ax
  mov di,8192
.endInit:
  dw .endCode - ($+2)
  mov ax,[bp+1234]
  mov [si+2345],ax
.endCode:

experimentLine10:
  db "Line10$"
  dw .endInit - ($+2)
  mov di,8192
.endInit:
  dw .endCode - ($+2)
  times 10 movsw
  add di,bx
.endCode:

experimentLine9:
  db "Line9$"
  dw .endInit - ($+2)
  mov di,8192
.endInit:
  dw .endCode - ($+2)
  times 9 movsw
  add di,bx
.endCode:

experimentLine8:
  db "Line8$"
  dw .endInit - ($+2)
  mov di,8192
.endInit:
  dw .endCode - ($+2)
  times 8 movsw
  add di,bx
.endCode:

experimentLine9System:
  db "Line9System$"
  dw .endInit - ($+2)
  mov ax,ds
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  times 9 movsw
  add di,bx
.endCode:

experimentLine8System:
  db "Line8System$"
  dw .endInit - ($+2)
  mov ax,ds
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  times 8 movsw
  add di,bx
.endCode:

experimentHScrollPrep:
  db "HScrollPrep$"
  dw .endInit - ($+2)
  mov ax,ds
  mov es,ax
.endInit:
  dw .endCode - ($+2)
  movsw
  add si,bx
.endCode:






experimentUpdate4_7:
  db "Update4_7$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
.endInit:
  dw .endCode - ($+2)

  mov al,[bx]
  inc bx
  out 0xe0,al
  lodsw
  xchg ax,di
  movsw
  lodsw
  xchg ax,di
  movsw
  lodsw
  xchg ax,di
  movsw
  lodsw
  xchg ax,di
  movsw
  nop
  nop
  nop
  nop
  nop
  nop
  nop

.endCode:

experimentUpdate6b:
  db "Update6b$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
.endInit:
  dw .endCode - ($+2)

  mov al,[bx]
  inc bx
  out 0xe0,al
  lodsw
  xchg ax,di
  movsb
  lodsw
  xchg ax,di
  movsb
  lodsw
  xchg ax,di
  movsb
  lodsw
  xchg ax,di
  movsb
  lodsw
  xchg ax,di
  movsb
  lodsw
  xchg ax,di
  movsb

.endCode:

experimentUpdate3q:
  db "Update3q$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
.endInit:
  dw .endCode - ($+2)

  mov al,[bx]
  inc bx
  out 0xe0,al
  lodsw
  xchg ax,di
  movsw
  movsw
  lodsw
  xchg ax,di
  movsw
  movsw
  lodsw

.endCode:




experimentUpdate:
  db "Update$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
.endInit:
  dw .endCode - ($+2)

  lodsw
  xchg ax,di
  movsw

  lodsw
  xchg ax,di
  movsw

  lodsw
  xchg ax,di
  movsw

  lodsw
  xchg ax,di
  movsw

  lodsw
  xchg ax,di
  movsw


  mov al,[bp+0]
  out 0xe0,al

.endCode:


experimentNop:
  db "Nop$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
  xor bx,bx
.endInit:
  dw .endCode - ($+2)

  nop
.endCode:


experimentChess:
  db "Chess$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
  xor bx,bx
.endInit:
  dw .endCode - ($+2)

  movsb
  add di,bx
.endCode:


experimentChess1:
  db "Chess1$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
  xor bx,bx
.endInit:
  dw .endCode - ($+2)

  stosb
  add di,27
.endCode:


experimentChess2:
  db "Chess2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
  xor bx,bx
.endInit:
  dw .endCode - ($+2)

  stosb
  inc di
.endCode:


experimentXOR1:
  db "XOR1$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
.endInit:
  dw .endCode - ($+2)

  xor ax,[si-80]
  stosw
  add di,dx

  xor ax,[si]
  stosw
  add di,dx

  xor ax,[si+80]
  stosw
  add di,dx
  add si,cx
.endCode:


experimentXOR2:
  db "XOR2$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
.endInit:
  dw .endCode - ($+2)

  xor ax,9999
  stosw
  add di,dx

.endCode:


experimentXOR3:
  db "XOR3$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
.endInit:
  dw .endCode - ($+2)

  xor al,99
  stosb
  add di,dx

.endCode:


experimentXOR4:
  db "XOR4$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
  xor di,di
  mov dx,-1
.endInit:
  dw .endCode - ($+2)

  xor al,99
  stosb
  inc di

.endCode:



experimentRZ:
  db "RZ$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

    movsb
    add si,bx

.endCode:


experimentParticle:
  db "Particle$"
  dw .endInit - ($+2)
  mov ax,0xb800
  mov es,ax
.endInit:
  dw .endCode - ($+2)

    mov di,1234
    mov al,[di]  ; Background image
    stosb        ; Erase

    mov ax,1234
    add ax,5678
    mov [9999],ax
    mov cx,1234
    add cx,5678  ; y velocity
    mov [9999],cx

    mov bl,ch
    mov bh,12
    add bx,bx
    mov di,[bx]
    mov bl,ah
    mov bh,34
    mov al,[bx]
    mov bh,45
    add bx,bx
    add di,[bx]
    mov [9999],di
    mov ah,[di]  ; Background image
    and ah,al
    not al
    and al,99 ; Colour
    stosb  ; Draw

.endCode:




